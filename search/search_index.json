{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"\u9996\u9875"},{"location":"docs/overview/","text":"\u6587\u7ae0\u5f52\u6863 \u00b6 Welcome to the MarkoXu Blog and enjoy yourself here. \ud83c\udfb8","title":"\u6587\u7ae0\u7d22\u5f15"},{"location":"docs/overview/#_1","text":"Welcome to the MarkoXu Blog and enjoy yourself here. \ud83c\udfb8","title":"\u6587\u7ae0\u5f52\u6863"},{"location":"docs/about-me/about-me/","text":"\u5173\u4e8e\u535a\u4e3b \u00b6 MarkoXu I'm interested in Full Stack Development and recently focus on Backend. \ud83d\udcaa \ud83d\udcbc Software Development Engineer at Intel Corporation. \ud83c\udf93 Master of East China Normal University, Shanghai, China. \ud83c\udfaf Currently learning Firmware & Distributed Systems & Backend \ud83c\udf31 Learning about x86 architecture and open source projects. \ud83d\udcda Reading more about Big Data & Cloud Native & Investment. \u270d\ud83c\udffb Writing technical articles and personal thoughts or ideas here . some achievements - \ud83d\udc51 Some GitHub statistical reports:","title":"\u5173\u4e8e\u535a\u4e3b"},{"location":"docs/about-me/about-me/#_1","text":"MarkoXu I'm interested in Full Stack Development and recently focus on Backend. \ud83d\udcaa \ud83d\udcbc Software Development Engineer at Intel Corporation. \ud83c\udf93 Master of East China Normal University, Shanghai, China. \ud83c\udfaf Currently learning Firmware & Distributed Systems & Backend \ud83c\udf31 Learning about x86 architecture and open source projects. \ud83d\udcda Reading more about Big Data & Cloud Native & Investment. \u270d\ud83c\udffb Writing technical articles and personal thoughts or ideas here . some achievements - \ud83d\udc51 Some GitHub statistical reports:","title":"\u5173\u4e8e\u535a\u4e3b"},{"location":"docs/code-interviews-offer/chapter-fifth/","text":"\u7b2c5\u7ae0 \u00b6 5.2 \u65f6\u95f4\u6548\u7387 \u00b6 \u9762\u8bd5\u989829 \u6570\u7ec4\u4e2d\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7\u4e00\u534a\u7684\u6570\u5b57 \u00b6 \u601d\u8def: \u4f7f\u7528hash\uff0ckey\u662f\u6570\u5b57\uff0cvalue\u662f\u51fa\u73b0\u7684\u6b21\u6570 \u6ce8\u610f: \u5217\u8868\u7684len\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(1) 1 2 3 4 5 6 7 def get_more_half_num ( nums ): hashes = dict () length = len ( nums ) for n in nums : hashes [ n ] = hashes [ n ] + 1 if hashes . get ( n ) else 1 if hashes [ n ] > length / 2 : return n \u9762\u8bd5\u989830 \u6700\u5c0f\u7684k\u4e2a\u6570 \u00b6 \u8981\u6c42\uff1a\u6c42\u6570\u7ec4\u4e2d\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7\u4e00\u534a\u7684\u6570\u5b57 \u601d\u8def: \u4f7f\u7528heapq\uff0c\u8be5\u6a21\u5757\u662f\u4e00\u4e2a\u6700\u5c0f\u5806\uff0c\u9700\u8981\u8f6c\u5316\u6210\u6700\u5927\u5806\uff0c\u53ea\u8981\u5728\u5165\u5806\u7684\u65f6\u5019\u628a\u503c\u53d6\u53cd\u5c31\u53ef\u4ee5\u8f6c\u5316\u6210\u6700\u5927\u5806(\u4ec5\u9002\u7528\u4e8e\u6570\u5b57) \u601d\u8def\u4e8c: \u6570\u7ec4\u6bd4\u8f83\u5c0f\u7684\u65f6\u5019\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528heapq\u7684nsmallest\u65b9\u6cd5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import heapq def get_least_k_nums ( nums , k ): # \u6570\u7ec4\u6bd4\u8f83\u5c0f\u7684\u65f6\u5019\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 return heapq . nsmallest ( k , nums ) class MaxHeap ( object ): def __init__ ( self , k ): self . k = k self . data = [] def push ( self , elem ): elem = - elem # \u5165\u5806\u7684\u65f6\u5019\u53d6\u53cd\uff0c\u5806\u9876\u5c31\u662f\u6700\u5927\u503c\u7684\u76f8\u53cd\u6570\u4e86 if len ( self . data ) < self . k : heapq . heappush ( self . data , elem ) else : least = self . data [ 0 ] if elem > least : heapq . heapreplace ( self . data , elem ) def get_least_k_nums ( self ): return sorted ([ - x for x in self . data ]) \u9762\u8bd5\u989831 \u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c \u00b6 \u601d\u8def: \u52a8\u6001\u89c4\u5212\u95ee\u9898 1 2 3 4 5 6 7 8 9 10 11 12 def max_sum ( nums ): ret = float ( \"-inf\" ) # \u8d1f\u65e0\u7a77 if not nums : return ret current = 0 for i in nums : if current <= 0 : current = i else : current += i ret = max ( ret , current ) return ret \u9762\u8bd5\u989832 \u4ece1\u5230n\u6574\u6570\u4e2d1\u51fa\u73b0\u7684\u6b21\u6570 \u00b6 \u8981\u6c42\uff1a\u6c42\u4ece1\u5230n\u6574\u6570\u7684\u5341\u8fdb\u5236\u8868\u793a\u4e2d\uff0c1\u51fa\u73b0\u7684\u6b21\u6570 \u601d\u8def: \u83b7\u53d6\u6bcf\u4e2a\u4f4d\u6570\u533a\u95f4\u4e0a\u6240\u6709\u6570\u4e2d\u5305\u542b1\u7684\u4e2a\u6570\uff0c\u7136\u540e\u5206\u522b\u5bf9\u9ad8\u4f4d\u5206\u6790\uff0c\u7136\u540e\u9012\u5f52\u7684\u5904\u7406\u4f4e\u4f4d\u6570 \u6b64\u9898\u4e2d\uff0c\u4f5c\u8005\u7684\u63cf\u8ff0\u6211\u6ca1\u6709\u7406\u89e3\uff0c\u6309\u7167\u81ea\u5df1\u7684\u7406\u89e3\u5199\u4e86\u4e00\u4e0b\uff0c\u5177\u4f53\u5185\u5bb9\u8bf7\u70b9\u51fb \u8fd9\u91cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 def get_digits ( n ): # \u6c42\u6574\u6570n\u7684\u4f4d\u6570 ret = 0 while n : ret += 1 n /= 10 return ret def get_1_digits ( n ): \"\"\" \u83b7\u53d6\u6bcf\u4e2a\u4f4d\u6570\u4e4b\u95f41\u7684\u603b\u6570 :param n: \u4f4d\u6570 \"\"\" if n <= 0 : return 0 if n == 1 : return 1 current = 9 * get_1_digits ( n - 1 ) + 10 ** ( n - 1 ) return get_1_digits ( n - 1 ) + current def get_1_nums ( n ): if n < 10 : return 1 if n >= 1 else 0 digit = get_digits ( n ) # \u4f4d\u6570 low_nums = get_1_digits ( digit - 1 ) # \u6700\u9ad8\u4f4d\u4e4b\u524d\u76841\u7684\u4e2a\u6570 high = int ( str ( n )[ 0 ]) # \u6700\u9ad8\u4f4d low = n - high * 10 ** ( digit - 1 ) # \u4f4e\u4f4d if high == 1 : high_nums = low + 1 # \u6700\u9ad8\u4f4d\u4e0a1\u7684\u4e2a\u6570 all_nums = high_nums else : high_nums = 10 ** ( digit - 1 ) all_nums = high_nums + low_nums * ( high - 1 ) # \u6700\u9ad8\u4f4d\u5927\u4e8e1\u7684\u8bdd\uff0c\u7edf\u8ba1\u6bcf\u4e2a\u591a\u4f4d\u6570\u540e\u9762\u5305\u542b\u76841 return low_nums + all_nums + get_1_nums ( low ) \u9762\u8bd5\u989833 \u628a\u6570\u7ec4\u6392\u6210\u6700\u5c0f\u7684\u6570 \u00b6 \u8981\u6c42\uff1a\u628a\u6570\u7ec4\u4e2d\u7684\u503c\u62fc\u63a5\uff0c\u627e\u51fa\u80fd\u4ea7\u751f\u7684\u6700\u5c0f\u7684\u6570[321,32,3]\u6700\u5c0f\u7684\u6570\u662f321323 \u601d\u8def: Python\u4e2d\u4e0d\u9700\u8981\u8003\u8651\u5927\u6574\u6570\uff0c\u9700\u8981\u81ea\u5df1\u5b9a\u4e49\u4e00\u4e2a\u6570\u7ec4\u6392\u5e8f\u89c4\u5219\uff0c\u76f4\u63a5\u8c03\u7528\u5e93\u51fd\u6570\u5c31\u53ef\u4ee5 1 2 3 4 5 6 def cmp ( a , b ): return int ( str ( a ) + str ( b )) - int ( str ( b ) + str ( a )) def print_mini ( nums ): print int ( '' . join ([ str ( num ) for num in sorted ( nums , cmp = cmp )])) 5.3 \u65f6\u95f4\u6548\u7387\u4e0e\u7a7a\u95f4\u6548\u7387\u7684\u5e73\u8861 \u00b6 \u9762\u8bd5\u989834 \u4e11\u6570 LeetCode \u00b6 \u8981\u6c42\uff1a\u53ea\u542b\u67092\u30013\u30015\u56e0\u5b50\u7684\u6570\u662f\u4e11\u6570\uff0c\u6c42\u7b2c1500\u4e2a\u4e11\u6570 \u601d\u8def: \u6309\u987a\u5e8f\u4fdd\u5b58\u5df2\u77e5\u7684\u4e11\u6570\uff0c\u4e0b\u4e00\u4e2a\u662f\u5df2\u77e5\u4e11\u6570\u4e2d\u67d0\u4e09\u4e2a\u6570\u4e58\u4ee52\uff0c3\uff0c5\u4e2d\u7684\u6700\u5c0f\u503c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Solution ( object ): def nthUglyNumber ( self , n ): \"\"\" :type n: int :rtype: int \"\"\" ugly = [ 1 ] t2 = t3 = t5 = 0 while len ( ugly ) < n : while ugly [ t2 ] * 2 <= ugly [ - 1 ]: t2 += 1 while ugly [ t3 ] * 3 <= ugly [ - 1 ]: t3 += 1 while ugly [ t5 ] * 5 <= ugly [ - 1 ]: t5 += 1 ugly . append ( min ( ugly [ t2 ] * 2 , ugly [ t3 ] * 3 , ugly [ t5 ] * 5 )) return ugly [ - 1 ] \u9762\u8bd5\u989835 \u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26 \u00b6 \u8981\u6c42\uff1a\u6c42\u5b57\u7b26\u4e32\u4e2d\u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26 \u601d\u8def: \u4f7f\u7528\u4e24\u4e2ahash\uff0c\u4e00\u4e2a\u8bb0\u5f55\u6bcf\u4e2a\u5b57\u7b26\u7a7f\u7ebf\u7684\u6b21\u6570\uff0c\u53e6\u4e00\u4e2a\u8bb0\u5f55\u6bcf\u4e2a\u5b57\u7b26\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e 1 2 3 4 5 6 7 8 9 10 11 12 13 def first_not_repeating_char ( string ): if not string : return - 1 count = {} loc = {} for k , s in enumerate ( string ): count [ s ] = count [ s ] + 1 if count . get ( s ) else 1 loc [ s ] = loc [ s ] if loc . get ( s ) else k ret = float ( 'inf' ) for k in loc . keys (): if count . get ( k ) == 1 and loc [ k ] < ret : ret = loc [ k ] return ret \u9762\u8bd5\u989836 \u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9 \u00b6 \u8981\u6c42\uff1a\u5728\u4e00\u4e2a\u6570\u7ec4\u4e2d\uff0c\u524d\u9762\u7684\u6570\u5b57\u6bd4\u540e\u9762\u7684\u5927\uff0c\u5c31\u662f\u4e00\u4e2a\u9006\u5e8f\u5bf9\uff0c\u6c42\u603b\u6570 \u601d\u8def: \u5f52\u5e76\u6392\u5e8f,\u5148\u628a\u6570\u7ec4\u4f9d\u6b21\u62c6\u5f00\uff0c\u7136\u540e\u5408\u5e76\u7684\u65f6\u5019\u7edf\u8ba1\u9006\u5e8f\u5bf9\u6570\u76ee\uff0c\u5e76\u6392\u5e8f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 import copy def get_inverse_pairs ( nums ): if not nums : return 0 start , end = 0 , len ( nums ) - 1 tmp = copy . deepcopy ( nums ) return inverse_pairs ( tmp , start , end ) def inverse_pairs ( tmp , start , end ): if start == end : # \u9012\u5f52\u7ed3\u675f\u6761\u4ef6 return 0 mid = ( end - start ) / 2 # \u5206\u522b\u5bf9\u5de6\u53f3\u4e24\u8fb9\u9012\u5f52\u6c42\u503c left = inverse_pairs ( tmp , start , start + mid ) right = inverse_pairs ( tmp , start + mid + 1 , end ) count = 0 # \u672c\u6b21\u9006\u5e8f\u5bf9\u6570\u76ee l_right , r_right = start + mid , end t = [] while l_right >= start and r_right >= start + mid + 1 : if tmp [ l_right ] > tmp [ r_right ]: t . append ( tmp [ l_right ]) count += ( r_right - mid - start ) l_right -= 1 else : t . append ( tmp [ r_right ]) r_right -= 1 while l_right >= start : t . append ( tmp [ l_right ]) l_right -= 1 while r_right >= start + mid + 1 : t . append ( tmp [ r_right ]) r_right -= 1 tmp [ start : end + 1 ] = t [:: - 1 ] return count + left + right \u9762\u8bd5\u989837 \u4e24\u4e2a\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u516c\u5171\u7ed3\u70b9 \u00b6 \u601d\u8def: \u5148\u83b7\u53d6\u5230\u4e24\u4e2a\u94fe\u8868\u7684\u957f\u5ea6\uff0c\u7136\u540e\u957f\u7684\u94fe\u8868\u5148\u8d70\u591a\u7684\u51e0\u6b65\uff0c\u4e4b\u540e\u4e00\u8d77\u904d\u5386 \u6587\u4ef6thirty_seven.py\u4e2d\u5305\u542b\u4e86\u8bbe\u7f6e\u94fe\u8868\u516c\u5171\u7ed3\u70b9\u7684\u4ee3\u7801\uff0c\u53ef\u4ee5\u7528\u6765\u6d4b\u8bd5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 def get_first_common_node ( link1 , link2 ): if not link1 or not link2 : return None length1 = length2 = 0 move1 , move2 = link1 , link2 while move1 : # \u83b7\u53d6\u94fe\u8868\u957f\u5ea6 length1 += 1 move1 = move1 . next while move2 : length2 += 1 move2 = move2 . next while length1 > length2 : # \u957f\u94fe\u8868\u5148\u8d70\u591a\u7684\u957f\u5ea6 length1 -= 1 link1 = link1 . next while length2 > length1 : length2 -= 1 link2 = link2 . next while link1 : # \u94fe\u8868\u4e00\u8d77\u8d70 if link1 == link2 : return link1 link1 , link2 = link1 . next , link2 . next return None","title":"\u7b2c5\u7ae0"},{"location":"docs/code-interviews-offer/chapter-fifth/#5","text":"","title":"\u7b2c5\u7ae0"},{"location":"docs/code-interviews-offer/chapter-fifth/#52","text":"","title":"5.2 \u65f6\u95f4\u6548\u7387"},{"location":"docs/code-interviews-offer/chapter-fifth/#29","text":"\u601d\u8def: \u4f7f\u7528hash\uff0ckey\u662f\u6570\u5b57\uff0cvalue\u662f\u51fa\u73b0\u7684\u6b21\u6570 \u6ce8\u610f: \u5217\u8868\u7684len\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(1) 1 2 3 4 5 6 7 def get_more_half_num ( nums ): hashes = dict () length = len ( nums ) for n in nums : hashes [ n ] = hashes [ n ] + 1 if hashes . get ( n ) else 1 if hashes [ n ] > length / 2 : return n","title":"\u9762\u8bd5\u989829 \u6570\u7ec4\u4e2d\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7\u4e00\u534a\u7684\u6570\u5b57"},{"location":"docs/code-interviews-offer/chapter-fifth/#30-k","text":"\u8981\u6c42\uff1a\u6c42\u6570\u7ec4\u4e2d\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7\u4e00\u534a\u7684\u6570\u5b57 \u601d\u8def: \u4f7f\u7528heapq\uff0c\u8be5\u6a21\u5757\u662f\u4e00\u4e2a\u6700\u5c0f\u5806\uff0c\u9700\u8981\u8f6c\u5316\u6210\u6700\u5927\u5806\uff0c\u53ea\u8981\u5728\u5165\u5806\u7684\u65f6\u5019\u628a\u503c\u53d6\u53cd\u5c31\u53ef\u4ee5\u8f6c\u5316\u6210\u6700\u5927\u5806(\u4ec5\u9002\u7528\u4e8e\u6570\u5b57) \u601d\u8def\u4e8c: \u6570\u7ec4\u6bd4\u8f83\u5c0f\u7684\u65f6\u5019\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528heapq\u7684nsmallest\u65b9\u6cd5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import heapq def get_least_k_nums ( nums , k ): # \u6570\u7ec4\u6bd4\u8f83\u5c0f\u7684\u65f6\u5019\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 return heapq . nsmallest ( k , nums ) class MaxHeap ( object ): def __init__ ( self , k ): self . k = k self . data = [] def push ( self , elem ): elem = - elem # \u5165\u5806\u7684\u65f6\u5019\u53d6\u53cd\uff0c\u5806\u9876\u5c31\u662f\u6700\u5927\u503c\u7684\u76f8\u53cd\u6570\u4e86 if len ( self . data ) < self . k : heapq . heappush ( self . data , elem ) else : least = self . data [ 0 ] if elem > least : heapq . heapreplace ( self . data , elem ) def get_least_k_nums ( self ): return sorted ([ - x for x in self . data ])","title":"\u9762\u8bd5\u989830 \u6700\u5c0f\u7684k\u4e2a\u6570"},{"location":"docs/code-interviews-offer/chapter-fifth/#31","text":"\u601d\u8def: \u52a8\u6001\u89c4\u5212\u95ee\u9898 1 2 3 4 5 6 7 8 9 10 11 12 def max_sum ( nums ): ret = float ( \"-inf\" ) # \u8d1f\u65e0\u7a77 if not nums : return ret current = 0 for i in nums : if current <= 0 : current = i else : current += i ret = max ( ret , current ) return ret","title":"\u9762\u8bd5\u989831 \u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c"},{"location":"docs/code-interviews-offer/chapter-fifth/#32-1n1","text":"\u8981\u6c42\uff1a\u6c42\u4ece1\u5230n\u6574\u6570\u7684\u5341\u8fdb\u5236\u8868\u793a\u4e2d\uff0c1\u51fa\u73b0\u7684\u6b21\u6570 \u601d\u8def: \u83b7\u53d6\u6bcf\u4e2a\u4f4d\u6570\u533a\u95f4\u4e0a\u6240\u6709\u6570\u4e2d\u5305\u542b1\u7684\u4e2a\u6570\uff0c\u7136\u540e\u5206\u522b\u5bf9\u9ad8\u4f4d\u5206\u6790\uff0c\u7136\u540e\u9012\u5f52\u7684\u5904\u7406\u4f4e\u4f4d\u6570 \u6b64\u9898\u4e2d\uff0c\u4f5c\u8005\u7684\u63cf\u8ff0\u6211\u6ca1\u6709\u7406\u89e3\uff0c\u6309\u7167\u81ea\u5df1\u7684\u7406\u89e3\u5199\u4e86\u4e00\u4e0b\uff0c\u5177\u4f53\u5185\u5bb9\u8bf7\u70b9\u51fb \u8fd9\u91cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 def get_digits ( n ): # \u6c42\u6574\u6570n\u7684\u4f4d\u6570 ret = 0 while n : ret += 1 n /= 10 return ret def get_1_digits ( n ): \"\"\" \u83b7\u53d6\u6bcf\u4e2a\u4f4d\u6570\u4e4b\u95f41\u7684\u603b\u6570 :param n: \u4f4d\u6570 \"\"\" if n <= 0 : return 0 if n == 1 : return 1 current = 9 * get_1_digits ( n - 1 ) + 10 ** ( n - 1 ) return get_1_digits ( n - 1 ) + current def get_1_nums ( n ): if n < 10 : return 1 if n >= 1 else 0 digit = get_digits ( n ) # \u4f4d\u6570 low_nums = get_1_digits ( digit - 1 ) # \u6700\u9ad8\u4f4d\u4e4b\u524d\u76841\u7684\u4e2a\u6570 high = int ( str ( n )[ 0 ]) # \u6700\u9ad8\u4f4d low = n - high * 10 ** ( digit - 1 ) # \u4f4e\u4f4d if high == 1 : high_nums = low + 1 # \u6700\u9ad8\u4f4d\u4e0a1\u7684\u4e2a\u6570 all_nums = high_nums else : high_nums = 10 ** ( digit - 1 ) all_nums = high_nums + low_nums * ( high - 1 ) # \u6700\u9ad8\u4f4d\u5927\u4e8e1\u7684\u8bdd\uff0c\u7edf\u8ba1\u6bcf\u4e2a\u591a\u4f4d\u6570\u540e\u9762\u5305\u542b\u76841 return low_nums + all_nums + get_1_nums ( low )","title":"\u9762\u8bd5\u989832 \u4ece1\u5230n\u6574\u6570\u4e2d1\u51fa\u73b0\u7684\u6b21\u6570"},{"location":"docs/code-interviews-offer/chapter-fifth/#33","text":"\u8981\u6c42\uff1a\u628a\u6570\u7ec4\u4e2d\u7684\u503c\u62fc\u63a5\uff0c\u627e\u51fa\u80fd\u4ea7\u751f\u7684\u6700\u5c0f\u7684\u6570[321,32,3]\u6700\u5c0f\u7684\u6570\u662f321323 \u601d\u8def: Python\u4e2d\u4e0d\u9700\u8981\u8003\u8651\u5927\u6574\u6570\uff0c\u9700\u8981\u81ea\u5df1\u5b9a\u4e49\u4e00\u4e2a\u6570\u7ec4\u6392\u5e8f\u89c4\u5219\uff0c\u76f4\u63a5\u8c03\u7528\u5e93\u51fd\u6570\u5c31\u53ef\u4ee5 1 2 3 4 5 6 def cmp ( a , b ): return int ( str ( a ) + str ( b )) - int ( str ( b ) + str ( a )) def print_mini ( nums ): print int ( '' . join ([ str ( num ) for num in sorted ( nums , cmp = cmp )]))","title":"\u9762\u8bd5\u989833 \u628a\u6570\u7ec4\u6392\u6210\u6700\u5c0f\u7684\u6570"},{"location":"docs/code-interviews-offer/chapter-fifth/#53","text":"","title":"5.3 \u65f6\u95f4\u6548\u7387\u4e0e\u7a7a\u95f4\u6548\u7387\u7684\u5e73\u8861"},{"location":"docs/code-interviews-offer/chapter-fifth/#34-leetcode","text":"\u8981\u6c42\uff1a\u53ea\u542b\u67092\u30013\u30015\u56e0\u5b50\u7684\u6570\u662f\u4e11\u6570\uff0c\u6c42\u7b2c1500\u4e2a\u4e11\u6570 \u601d\u8def: \u6309\u987a\u5e8f\u4fdd\u5b58\u5df2\u77e5\u7684\u4e11\u6570\uff0c\u4e0b\u4e00\u4e2a\u662f\u5df2\u77e5\u4e11\u6570\u4e2d\u67d0\u4e09\u4e2a\u6570\u4e58\u4ee52\uff0c3\uff0c5\u4e2d\u7684\u6700\u5c0f\u503c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Solution ( object ): def nthUglyNumber ( self , n ): \"\"\" :type n: int :rtype: int \"\"\" ugly = [ 1 ] t2 = t3 = t5 = 0 while len ( ugly ) < n : while ugly [ t2 ] * 2 <= ugly [ - 1 ]: t2 += 1 while ugly [ t3 ] * 3 <= ugly [ - 1 ]: t3 += 1 while ugly [ t5 ] * 5 <= ugly [ - 1 ]: t5 += 1 ugly . append ( min ( ugly [ t2 ] * 2 , ugly [ t3 ] * 3 , ugly [ t5 ] * 5 )) return ugly [ - 1 ]","title":"\u9762\u8bd5\u989834 \u4e11\u6570 LeetCode"},{"location":"docs/code-interviews-offer/chapter-fifth/#35","text":"\u8981\u6c42\uff1a\u6c42\u5b57\u7b26\u4e32\u4e2d\u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26 \u601d\u8def: \u4f7f\u7528\u4e24\u4e2ahash\uff0c\u4e00\u4e2a\u8bb0\u5f55\u6bcf\u4e2a\u5b57\u7b26\u7a7f\u7ebf\u7684\u6b21\u6570\uff0c\u53e6\u4e00\u4e2a\u8bb0\u5f55\u6bcf\u4e2a\u5b57\u7b26\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e 1 2 3 4 5 6 7 8 9 10 11 12 13 def first_not_repeating_char ( string ): if not string : return - 1 count = {} loc = {} for k , s in enumerate ( string ): count [ s ] = count [ s ] + 1 if count . get ( s ) else 1 loc [ s ] = loc [ s ] if loc . get ( s ) else k ret = float ( 'inf' ) for k in loc . keys (): if count . get ( k ) == 1 and loc [ k ] < ret : ret = loc [ k ] return ret","title":"\u9762\u8bd5\u989835 \u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26"},{"location":"docs/code-interviews-offer/chapter-fifth/#36","text":"\u8981\u6c42\uff1a\u5728\u4e00\u4e2a\u6570\u7ec4\u4e2d\uff0c\u524d\u9762\u7684\u6570\u5b57\u6bd4\u540e\u9762\u7684\u5927\uff0c\u5c31\u662f\u4e00\u4e2a\u9006\u5e8f\u5bf9\uff0c\u6c42\u603b\u6570 \u601d\u8def: \u5f52\u5e76\u6392\u5e8f,\u5148\u628a\u6570\u7ec4\u4f9d\u6b21\u62c6\u5f00\uff0c\u7136\u540e\u5408\u5e76\u7684\u65f6\u5019\u7edf\u8ba1\u9006\u5e8f\u5bf9\u6570\u76ee\uff0c\u5e76\u6392\u5e8f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 import copy def get_inverse_pairs ( nums ): if not nums : return 0 start , end = 0 , len ( nums ) - 1 tmp = copy . deepcopy ( nums ) return inverse_pairs ( tmp , start , end ) def inverse_pairs ( tmp , start , end ): if start == end : # \u9012\u5f52\u7ed3\u675f\u6761\u4ef6 return 0 mid = ( end - start ) / 2 # \u5206\u522b\u5bf9\u5de6\u53f3\u4e24\u8fb9\u9012\u5f52\u6c42\u503c left = inverse_pairs ( tmp , start , start + mid ) right = inverse_pairs ( tmp , start + mid + 1 , end ) count = 0 # \u672c\u6b21\u9006\u5e8f\u5bf9\u6570\u76ee l_right , r_right = start + mid , end t = [] while l_right >= start and r_right >= start + mid + 1 : if tmp [ l_right ] > tmp [ r_right ]: t . append ( tmp [ l_right ]) count += ( r_right - mid - start ) l_right -= 1 else : t . append ( tmp [ r_right ]) r_right -= 1 while l_right >= start : t . append ( tmp [ l_right ]) l_right -= 1 while r_right >= start + mid + 1 : t . append ( tmp [ r_right ]) r_right -= 1 tmp [ start : end + 1 ] = t [:: - 1 ] return count + left + right","title":"\u9762\u8bd5\u989836 \u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9"},{"location":"docs/code-interviews-offer/chapter-fifth/#37","text":"\u601d\u8def: \u5148\u83b7\u53d6\u5230\u4e24\u4e2a\u94fe\u8868\u7684\u957f\u5ea6\uff0c\u7136\u540e\u957f\u7684\u94fe\u8868\u5148\u8d70\u591a\u7684\u51e0\u6b65\uff0c\u4e4b\u540e\u4e00\u8d77\u904d\u5386 \u6587\u4ef6thirty_seven.py\u4e2d\u5305\u542b\u4e86\u8bbe\u7f6e\u94fe\u8868\u516c\u5171\u7ed3\u70b9\u7684\u4ee3\u7801\uff0c\u53ef\u4ee5\u7528\u6765\u6d4b\u8bd5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 def get_first_common_node ( link1 , link2 ): if not link1 or not link2 : return None length1 = length2 = 0 move1 , move2 = link1 , link2 while move1 : # \u83b7\u53d6\u94fe\u8868\u957f\u5ea6 length1 += 1 move1 = move1 . next while move2 : length2 += 1 move2 = move2 . next while length1 > length2 : # \u957f\u94fe\u8868\u5148\u8d70\u591a\u7684\u957f\u5ea6 length1 -= 1 link1 = link1 . next while length2 > length1 : length2 -= 1 link2 = link2 . next while link1 : # \u94fe\u8868\u4e00\u8d77\u8d70 if link1 == link2 : return link1 link1 , link2 = link1 . next , link2 . next return None","title":"\u9762\u8bd5\u989837 \u4e24\u4e2a\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u516c\u5171\u7ed3\u70b9"},{"location":"docs/code-interviews-offer/chapter-first/","text":"\u7b2c1\u7ae0 \u00b6","title":"\u7b2c1\u7ae0"},{"location":"docs/code-interviews-offer/chapter-first/#1","text":"","title":"\u7b2c1\u7ae0"},{"location":"docs/code-interviews-offer/chapter-forth/","text":"\u7b2c4\u7ae0 \u00b6 4.2 \u753b\u56fe\u8ba9\u62bd\u8c61\u95ee\u9898\u5f62\u8c61\u5316 \u00b6 \u9762\u8bd5\u989819 \u4e8c\u53c9\u6811\u7684\u955c\u50cf \u00b6 \u601d\u8def\u4e00\uff1a\u53ef\u4ee5\u6309\u5c42\u6b21\u904d\u5386\uff0c\u6bcf\u4e00\u5c42\u4ece\u53f3\u5230\u5de6 \u601d\u8def\u4e8c\uff1a\u4f7f\u7528\u9012\u5f52 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 def mirror_bfs ( root ): ret = [] queue = deque ([ root ]) while queue : node = queue . popleft () if node : ret . append ( node . val ) queue . append ( node . right ) queue . append ( node . left ) return ret def mirror_pre ( root ): ret = [] def traversal ( root ): if root : ret . append ( root . val ) traversal ( root . right ) traversal ( root . left ) traversal ( root ) return ret \u9762\u8bd5\u989820 \u987a\u65f6\u9488\u6253\u5370\u77e9\u9635 \u00b6 \u6bcf\u4e00\u5708\u7684\u5f00\u59cb\u4f4d\u7f6e\u603b\u662f\u5750\u4e0a\u89d2\u5143\u7d20[0, 0], [1, 1]... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 def print_matrix ( matrix ): \"\"\" :param matrix: [[]] \"\"\" rows = len ( matrix ) cols = len ( matrix [ 0 ]) if matrix else 0 start = 0 ret = [] while start * 2 < rows and start * 2 < cols : print_circle ( matrix , start , rows , cols , ret ) start += 1 print ret def print_circle ( matrix , start , rows , cols , ret ): row = rows - start - 1 # \u6700\u540e\u4e00\u884c col = cols - start - 1 # left->right for c in range ( start , col + 1 ): ret . append ( matrix [ start ][ c ]) # top->bottom if start < row : for r in range ( start + 1 , row + 1 ): ret . append ( matrix [ r ][ col ]) # right->left if start < row and start < col : for c in range ( start , col )[:: - 1 ]: ret . append ( matrix [ row ][ c ]) # bottom->top if start < row and start < col : for r in range ( start + 1 , row )[:: - 1 ]: ret . append ( matrix [ r ][ start ]) 4.3 \u4e3e\u4f8b\u8ba9\u62bd\u8c61\u95ee\u9898\u5177\u4f53\u5316 \u00b6 \u9762\u8bd5\u989821 \u5305\u542bmin\u51fd\u6570\u7684\u6808 \u00b6 \u8981\u6c42\uff1a\u6808\u7684push\uff0cpop\uff0cmin\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662fO(1) \u601d\u8def\uff1a\u4f7f\u7528\u4e00\u4e2a\u8f85\u52a9\u6808\u4fdd\u5b58\u6700\u5c0f\u503c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class MyStack ( object ): def __init__ ( self ): self . stack = [] self . min = [] def push ( self , val ): self . stack . append ( val ) if self . min and self . min [ - 1 ] < val : self . min . append ( self . min [ - 1 ]) else : self . min . append ( val ) def pop ( self ): if self . stack : self . min . pop () return self . stack . pop () return None def min ( self ): return self . min [ - 1 ] if self . min else None \u9762\u8bd5\u989822 \u6808\u7684\u538b\u5165\u5f39\u51fa\u5e8f\u5217 \u00b6 \u8981\u6c42\uff1a\u5224\u65ad\u7ed9\u5b9a\u7684\u4e24\u4e2a\u5e8f\u5217\u4e2d\uff0c\u540e\u8005\u662f\u4e0d\u662f\u524d\u8005\u7684\u5f39\u51fa\u5e8f\u5217\uff0c\u7ed9\u5b9a\u6808\u4e0d\u5305\u542b\u76f8\u540c\u503c \u601d\u8def\uff1a\u4f7f\u7528\u4e00\u4e2a\u8f85\u52a9\u6808, \u5982\u679c\u8f85\u52a9\u6808\u6808\u9876\u5143\u7d20\u4e0d\u7b49\u4e8e\u51fa\u6808\u5143\u7d20\uff0c\u5219\u4ece\u5165\u6808\u4e2d\u627e\u6539\u503c\uff0c\u76f4\u5230\u5165\u6808\u4e3a\u7a7a \u5982\u679c\u6700\u540e\u51fa\u6808\u5e8f\u5217\u4e3a\u7a7a\uff0c\u5219\u662f\u5165\u6808\u7684\u5f39\u51fa\u5e8f\u5217\u503c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 def pop_order ( push_stack , pop_stack ): if not push_stack or not pop_stack : return False stack = [] while pop_stack : pop_val = pop_stack [ 0 ] if stack and stack [ - 1 ] == pop_val : stack . pop () pop_stack . pop ( 0 ) else : while push_stack : if push_stack [ 0 ] != pop_val : stack . append ( push_stack . pop ( 0 )) else : push_stack . pop ( 0 ) pop_stack . pop ( 0 ) break if not push_stack : while stack : if stack . pop () != pop_stack . pop ( 0 ): return False if not pop_stack : return True return False \u9762\u8bd5\u989823 \u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\u4e8c\u53c9\u6811 \u00b6 \u601d\u8def\uff1a\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u6309\u5c42\u6b21\u904d\u5386 1 2 3 4 5 6 7 8 9 10 11 12 13 def bfs ( tree ): if not tree : return None stack = [ tree ] ret = [] while stack : node = stack . pop ( 0 ) ret . append ( node . val ) if node . left : stack . append ( node . left ) if node . right : stack . append ( node . right ) return ret \u9762\u8bd5\u989824 \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u5e8f\u5217 \u00b6 \u8981\u6c42\uff1a\u5224\u65ad\u7ed9\u5b9a\u7684\u6574\u6570\u6570\u7ec4\u662f\u4e0d\u662f\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u5e8f\u5217 \u6574\u6570\u6570\u7ec4\u4e2d\u4e0d\u5305\u542b\u91cd\u590d\u503c \u6574\u6570\u5e8f\u5217\u7684\u6700\u540e\u4e00\u4e2a\u503c\u662f\u6839\u7ed3\u70b9\uff0c\u7136\u540e\u6bd4\u6839\u7ed3\u70b9\u5c0f\u7684\u503c\u662f\u5de6\u5b50\u6811\uff0c\u5269\u4e0b\u7684\u662f\u53f3\u5b50\u6811\uff0c\u9012\u5f52\u5de6\u53f3\u5b50\u6811 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 def is_post_order ( order ): length = len ( order ) if length : root = order [ - 1 ] left = 0 while order [ left ] < root : left += 1 right = left while right < length - 1 : if order [ right ] < root : return False right += 1 left_ret = True if left == 0 else is_post_order ( order [: left ]) right_ret = True if left == right else is_post_order ( order [ left : right ]) return left_ret and right_ret return False \u9762\u8bd5\u989825 \u4e8c\u53c9\u6811\u4e2d\u548c\u4e3a\u67d0\u4e00\u503c\u7684\u8def\u5f84 \u00b6 \u8981\u6c42\uff1a\u8f93\u5165\u4e00\u68f5\u4e8c\u53c9\u6811\u548c\u4e00\u4e2a\u503c\uff0c\u6c42\u4ece\u6839\u7ed3\u70b9\u5230\u53f6\u7ed3\u70b9\u7684\u548c\u7b49\u4e8e\u8be5\u503c\u7684\u8def\u5f84 \u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u53d8\u5f62 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 def find_path ( tree , num ): ret = [] if not tree : return ret path = [ tree ] sums = [ tree . val ] def dfs ( tree ): if tree . left : path . append ( tree . left ) sums . append ( sums [ - 1 ] + tree . left . val ) dfs ( tree . left ) if tree . right : path . append ( tree . right ) sums . append ( sums [ - 1 ] + tree . right . val ) dfs ( tree . right ) if not tree . left and not tree . right : if sums [ - 1 ] == num : ret . append ([ p . val for p in path ]) path . pop () sums . pop () dfs ( tree ) return ret 4.4 \u5206\u89e3\u8ba9\u590d\u6742\u95ee\u9898\u7b80\u5355\u5316 \u00b6 \u9762\u8bd5\u989826 \u590d\u6742\u94fe\u8868\u7684\u590d\u5236 \u00b6 \u8981\u6c42\uff1a\u94fe\u8868\u4e2d\u9664\u4e86\u6307\u5411\u540e\u4e00\u4e2a\u7ed3\u70b9\u7684\u6307\u9488\u4e4b\u5916\uff0c\u8fd8\u6709\u4e00\u4e2a\u6307\u9488\u6307\u5411\u4efb\u610f\u7ed3\u70b9 \u5206\u4e3a\u4e09\u6b65\u5b8c\u6210\uff1a \u4e00:\u590d\u5236\u6bcf\u4e2a\u7ed3\u70b9\uff0c\u5e76\u628a\u65b0\u7ed3\u70b9\u653e\u5728\u8001\u7ed3\u70b9\u540e\u9762\uff0c\u59821->2,\u590d\u5236\u4e3a1->1->2->2 \u4e8c:\u4e3a\u6bcf\u4e2a\u65b0\u7ed3\u70b9\u8bbe\u7f6eother\u6307\u9488 \u4e09:\u628a\u590d\u5236\u540e\u7684\u7ed3\u70b9\u94fe\u8868\u62c6\u5f00 \u9898\u76ee\u8bbe\u7f6e\u4e86\u590d\u6742\u94fe\u8868\u7684\u5b9e\u73b0\uff0c\u6d4b\u8bd5\u4ee3\u7801\u89c1\u6587\u4ef6twenth_six.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 class Solution ( object ): @staticmethod def clone_nodes ( head ): # \u7ed3\u70b9\u590d\u5236 move = head while move : tmp = Node ( move . val ) tmp . next = move . next move . next = tmp move = tmp . next return head @staticmethod def set_nodes ( head ): # other\u6307\u9488\u8bbe\u7f6e move = head while move : m_next = move . next if move . other : m_next . other = move . other . next move = m_next . next return head @staticmethod def reconstruct_nodes ( head ): # \u7ed3\u70b9\u62c6\u5206 ret = head . next if head else Node move = ret while head : head = move . next if head : move . next = head . next move = move . next return ret @staticmethod def clone_link ( head ): # \u7ed3\u679c h = Solution . clone_nodes ( head ) h = Solution . set_nodes ( h ) ret = Solution . reconstruct_nodes ( h ) return ret \u9762\u8bd5\u989827 \u4e8c\u53c9\u641c\u7d22\u6811\u4e0e\u53cc\u5411\u94fe\u8868 \u00b6 \u8981\u6c42: \u5c06\u4e8c\u53c9\u641c\u7d22\u6811\u8f6c\u5316\u6210\u4e00\u4e2a\u6392\u5e8f\u7684\u53cc\u5411\u94fe\u8868\uff0c\u53ea\u8c03\u6574\u6811\u4e2d\u7ed3\u70b9\u7684\u6307\u5411 \u601d\u8def: \u4e2d\u5e8f\u904d\u5386\uff0c\u6839\u7ed3\u70b9\u7684left\u6307\u5411\u5de6\u5b50\u6811\u7684\u6700\u540e\u4e00\u4e2a(\u6700\u5927)\u503c\uff0cright\u6307\u5411\u53f3\u5b50\u6811\u7684(\u6700\u5c0f)\u503c \u6ce8\u610f: \u9898\u76ee\u6784\u9020\u4e86\u4e00\u4e2a\u666e\u901a\u4e8c\u53c9\u6811\u7528\u6765\u6d4b\u8bd5\uff0c\u6784\u9020\u65f6\u6309\u7167\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u987a\u5e8f\u8f93\u5165\u7ed3\u70b9\uff0c\u7a7a\u7ed3\u70b9\u7528None\u8868\u793a\uff0c\u8be6\u60c5\u89c1twenty_seven.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Solution ( object ): @staticmethod def convert ( tree ): \"\"\"\u7ed3\u70b9\u8f6c\u6362\"\"\" if not tree : return None p_last = Solution . convert_nodes ( tree , None ) while p_last and p_last . left : # \u83b7\u53d6\u94fe\u8868\u5934\u7ed3\u70b9 p_last = p_last . left return p_last @staticmethod def convert_nodes ( tree , last ): if not tree : return None if tree . left : last = Solution . convert_nodes ( tree . left , last ) if last : last . right = tree tree . left = last last = tree if tree . right : last = Solution . convert_nodes ( tree . right , last ) return last \u9762\u8bd5\u989828 \u5b57\u7b26\u4e32\u7684\u6392\u5217 \u00b6 \u8981\u6c42\uff1a\u6c42\u8f93\u5165\u5b57\u7b26\u4e32\u7684\u5168\u6392\u5217 \u601d\u8def\uff1a\u9012\u5f52\u5b8c\u6210\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5e93\u51fd\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 def my_permutation ( s ): str_set = [] ret = [] # \u6700\u540e\u7684\u7ed3\u679c def permutation ( string ): for i in string : str_tem = string . replace ( i , '' ) str_set . append ( i ) if len ( str_tem ) > 0 : permutation ( str_tem ) else : ret . append ( '' . join ( str_set )) str_set . pop () permutation ( s ) return ret","title":"\u7b2c4\u7ae0"},{"location":"docs/code-interviews-offer/chapter-forth/#4","text":"","title":"\u7b2c4\u7ae0"},{"location":"docs/code-interviews-offer/chapter-forth/#42","text":"","title":"4.2 \u753b\u56fe\u8ba9\u62bd\u8c61\u95ee\u9898\u5f62\u8c61\u5316"},{"location":"docs/code-interviews-offer/chapter-forth/#19","text":"\u601d\u8def\u4e00\uff1a\u53ef\u4ee5\u6309\u5c42\u6b21\u904d\u5386\uff0c\u6bcf\u4e00\u5c42\u4ece\u53f3\u5230\u5de6 \u601d\u8def\u4e8c\uff1a\u4f7f\u7528\u9012\u5f52 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 def mirror_bfs ( root ): ret = [] queue = deque ([ root ]) while queue : node = queue . popleft () if node : ret . append ( node . val ) queue . append ( node . right ) queue . append ( node . left ) return ret def mirror_pre ( root ): ret = [] def traversal ( root ): if root : ret . append ( root . val ) traversal ( root . right ) traversal ( root . left ) traversal ( root ) return ret","title":"\u9762\u8bd5\u989819 \u4e8c\u53c9\u6811\u7684\u955c\u50cf"},{"location":"docs/code-interviews-offer/chapter-forth/#20","text":"\u6bcf\u4e00\u5708\u7684\u5f00\u59cb\u4f4d\u7f6e\u603b\u662f\u5750\u4e0a\u89d2\u5143\u7d20[0, 0], [1, 1]... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 def print_matrix ( matrix ): \"\"\" :param matrix: [[]] \"\"\" rows = len ( matrix ) cols = len ( matrix [ 0 ]) if matrix else 0 start = 0 ret = [] while start * 2 < rows and start * 2 < cols : print_circle ( matrix , start , rows , cols , ret ) start += 1 print ret def print_circle ( matrix , start , rows , cols , ret ): row = rows - start - 1 # \u6700\u540e\u4e00\u884c col = cols - start - 1 # left->right for c in range ( start , col + 1 ): ret . append ( matrix [ start ][ c ]) # top->bottom if start < row : for r in range ( start + 1 , row + 1 ): ret . append ( matrix [ r ][ col ]) # right->left if start < row and start < col : for c in range ( start , col )[:: - 1 ]: ret . append ( matrix [ row ][ c ]) # bottom->top if start < row and start < col : for r in range ( start + 1 , row )[:: - 1 ]: ret . append ( matrix [ r ][ start ])","title":"\u9762\u8bd5\u989820 \u987a\u65f6\u9488\u6253\u5370\u77e9\u9635"},{"location":"docs/code-interviews-offer/chapter-forth/#43","text":"","title":"4.3 \u4e3e\u4f8b\u8ba9\u62bd\u8c61\u95ee\u9898\u5177\u4f53\u5316"},{"location":"docs/code-interviews-offer/chapter-forth/#21-min","text":"\u8981\u6c42\uff1a\u6808\u7684push\uff0cpop\uff0cmin\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662fO(1) \u601d\u8def\uff1a\u4f7f\u7528\u4e00\u4e2a\u8f85\u52a9\u6808\u4fdd\u5b58\u6700\u5c0f\u503c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class MyStack ( object ): def __init__ ( self ): self . stack = [] self . min = [] def push ( self , val ): self . stack . append ( val ) if self . min and self . min [ - 1 ] < val : self . min . append ( self . min [ - 1 ]) else : self . min . append ( val ) def pop ( self ): if self . stack : self . min . pop () return self . stack . pop () return None def min ( self ): return self . min [ - 1 ] if self . min else None","title":"\u9762\u8bd5\u989821 \u5305\u542bmin\u51fd\u6570\u7684\u6808"},{"location":"docs/code-interviews-offer/chapter-forth/#22","text":"\u8981\u6c42\uff1a\u5224\u65ad\u7ed9\u5b9a\u7684\u4e24\u4e2a\u5e8f\u5217\u4e2d\uff0c\u540e\u8005\u662f\u4e0d\u662f\u524d\u8005\u7684\u5f39\u51fa\u5e8f\u5217\uff0c\u7ed9\u5b9a\u6808\u4e0d\u5305\u542b\u76f8\u540c\u503c \u601d\u8def\uff1a\u4f7f\u7528\u4e00\u4e2a\u8f85\u52a9\u6808, \u5982\u679c\u8f85\u52a9\u6808\u6808\u9876\u5143\u7d20\u4e0d\u7b49\u4e8e\u51fa\u6808\u5143\u7d20\uff0c\u5219\u4ece\u5165\u6808\u4e2d\u627e\u6539\u503c\uff0c\u76f4\u5230\u5165\u6808\u4e3a\u7a7a \u5982\u679c\u6700\u540e\u51fa\u6808\u5e8f\u5217\u4e3a\u7a7a\uff0c\u5219\u662f\u5165\u6808\u7684\u5f39\u51fa\u5e8f\u5217\u503c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 def pop_order ( push_stack , pop_stack ): if not push_stack or not pop_stack : return False stack = [] while pop_stack : pop_val = pop_stack [ 0 ] if stack and stack [ - 1 ] == pop_val : stack . pop () pop_stack . pop ( 0 ) else : while push_stack : if push_stack [ 0 ] != pop_val : stack . append ( push_stack . pop ( 0 )) else : push_stack . pop ( 0 ) pop_stack . pop ( 0 ) break if not push_stack : while stack : if stack . pop () != pop_stack . pop ( 0 ): return False if not pop_stack : return True return False","title":"\u9762\u8bd5\u989822 \u6808\u7684\u538b\u5165\u5f39\u51fa\u5e8f\u5217"},{"location":"docs/code-interviews-offer/chapter-forth/#23","text":"\u601d\u8def\uff1a\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u6309\u5c42\u6b21\u904d\u5386 1 2 3 4 5 6 7 8 9 10 11 12 13 def bfs ( tree ): if not tree : return None stack = [ tree ] ret = [] while stack : node = stack . pop ( 0 ) ret . append ( node . val ) if node . left : stack . append ( node . left ) if node . right : stack . append ( node . right ) return ret","title":"\u9762\u8bd5\u989823 \u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\u4e8c\u53c9\u6811"},{"location":"docs/code-interviews-offer/chapter-forth/#24","text":"\u8981\u6c42\uff1a\u5224\u65ad\u7ed9\u5b9a\u7684\u6574\u6570\u6570\u7ec4\u662f\u4e0d\u662f\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u5e8f\u5217 \u6574\u6570\u6570\u7ec4\u4e2d\u4e0d\u5305\u542b\u91cd\u590d\u503c \u6574\u6570\u5e8f\u5217\u7684\u6700\u540e\u4e00\u4e2a\u503c\u662f\u6839\u7ed3\u70b9\uff0c\u7136\u540e\u6bd4\u6839\u7ed3\u70b9\u5c0f\u7684\u503c\u662f\u5de6\u5b50\u6811\uff0c\u5269\u4e0b\u7684\u662f\u53f3\u5b50\u6811\uff0c\u9012\u5f52\u5de6\u53f3\u5b50\u6811 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 def is_post_order ( order ): length = len ( order ) if length : root = order [ - 1 ] left = 0 while order [ left ] < root : left += 1 right = left while right < length - 1 : if order [ right ] < root : return False right += 1 left_ret = True if left == 0 else is_post_order ( order [: left ]) right_ret = True if left == right else is_post_order ( order [ left : right ]) return left_ret and right_ret return False","title":"\u9762\u8bd5\u989824 \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u5e8f\u5217"},{"location":"docs/code-interviews-offer/chapter-forth/#25","text":"\u8981\u6c42\uff1a\u8f93\u5165\u4e00\u68f5\u4e8c\u53c9\u6811\u548c\u4e00\u4e2a\u503c\uff0c\u6c42\u4ece\u6839\u7ed3\u70b9\u5230\u53f6\u7ed3\u70b9\u7684\u548c\u7b49\u4e8e\u8be5\u503c\u7684\u8def\u5f84 \u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u53d8\u5f62 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 def find_path ( tree , num ): ret = [] if not tree : return ret path = [ tree ] sums = [ tree . val ] def dfs ( tree ): if tree . left : path . append ( tree . left ) sums . append ( sums [ - 1 ] + tree . left . val ) dfs ( tree . left ) if tree . right : path . append ( tree . right ) sums . append ( sums [ - 1 ] + tree . right . val ) dfs ( tree . right ) if not tree . left and not tree . right : if sums [ - 1 ] == num : ret . append ([ p . val for p in path ]) path . pop () sums . pop () dfs ( tree ) return ret","title":"\u9762\u8bd5\u989825 \u4e8c\u53c9\u6811\u4e2d\u548c\u4e3a\u67d0\u4e00\u503c\u7684\u8def\u5f84"},{"location":"docs/code-interviews-offer/chapter-forth/#44","text":"","title":"4.4 \u5206\u89e3\u8ba9\u590d\u6742\u95ee\u9898\u7b80\u5355\u5316"},{"location":"docs/code-interviews-offer/chapter-forth/#26","text":"\u8981\u6c42\uff1a\u94fe\u8868\u4e2d\u9664\u4e86\u6307\u5411\u540e\u4e00\u4e2a\u7ed3\u70b9\u7684\u6307\u9488\u4e4b\u5916\uff0c\u8fd8\u6709\u4e00\u4e2a\u6307\u9488\u6307\u5411\u4efb\u610f\u7ed3\u70b9 \u5206\u4e3a\u4e09\u6b65\u5b8c\u6210\uff1a \u4e00:\u590d\u5236\u6bcf\u4e2a\u7ed3\u70b9\uff0c\u5e76\u628a\u65b0\u7ed3\u70b9\u653e\u5728\u8001\u7ed3\u70b9\u540e\u9762\uff0c\u59821->2,\u590d\u5236\u4e3a1->1->2->2 \u4e8c:\u4e3a\u6bcf\u4e2a\u65b0\u7ed3\u70b9\u8bbe\u7f6eother\u6307\u9488 \u4e09:\u628a\u590d\u5236\u540e\u7684\u7ed3\u70b9\u94fe\u8868\u62c6\u5f00 \u9898\u76ee\u8bbe\u7f6e\u4e86\u590d\u6742\u94fe\u8868\u7684\u5b9e\u73b0\uff0c\u6d4b\u8bd5\u4ee3\u7801\u89c1\u6587\u4ef6twenth_six.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 class Solution ( object ): @staticmethod def clone_nodes ( head ): # \u7ed3\u70b9\u590d\u5236 move = head while move : tmp = Node ( move . val ) tmp . next = move . next move . next = tmp move = tmp . next return head @staticmethod def set_nodes ( head ): # other\u6307\u9488\u8bbe\u7f6e move = head while move : m_next = move . next if move . other : m_next . other = move . other . next move = m_next . next return head @staticmethod def reconstruct_nodes ( head ): # \u7ed3\u70b9\u62c6\u5206 ret = head . next if head else Node move = ret while head : head = move . next if head : move . next = head . next move = move . next return ret @staticmethod def clone_link ( head ): # \u7ed3\u679c h = Solution . clone_nodes ( head ) h = Solution . set_nodes ( h ) ret = Solution . reconstruct_nodes ( h ) return ret","title":"\u9762\u8bd5\u989826 \u590d\u6742\u94fe\u8868\u7684\u590d\u5236"},{"location":"docs/code-interviews-offer/chapter-forth/#27","text":"\u8981\u6c42: \u5c06\u4e8c\u53c9\u641c\u7d22\u6811\u8f6c\u5316\u6210\u4e00\u4e2a\u6392\u5e8f\u7684\u53cc\u5411\u94fe\u8868\uff0c\u53ea\u8c03\u6574\u6811\u4e2d\u7ed3\u70b9\u7684\u6307\u5411 \u601d\u8def: \u4e2d\u5e8f\u904d\u5386\uff0c\u6839\u7ed3\u70b9\u7684left\u6307\u5411\u5de6\u5b50\u6811\u7684\u6700\u540e\u4e00\u4e2a(\u6700\u5927)\u503c\uff0cright\u6307\u5411\u53f3\u5b50\u6811\u7684(\u6700\u5c0f)\u503c \u6ce8\u610f: \u9898\u76ee\u6784\u9020\u4e86\u4e00\u4e2a\u666e\u901a\u4e8c\u53c9\u6811\u7528\u6765\u6d4b\u8bd5\uff0c\u6784\u9020\u65f6\u6309\u7167\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u987a\u5e8f\u8f93\u5165\u7ed3\u70b9\uff0c\u7a7a\u7ed3\u70b9\u7528None\u8868\u793a\uff0c\u8be6\u60c5\u89c1twenty_seven.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Solution ( object ): @staticmethod def convert ( tree ): \"\"\"\u7ed3\u70b9\u8f6c\u6362\"\"\" if not tree : return None p_last = Solution . convert_nodes ( tree , None ) while p_last and p_last . left : # \u83b7\u53d6\u94fe\u8868\u5934\u7ed3\u70b9 p_last = p_last . left return p_last @staticmethod def convert_nodes ( tree , last ): if not tree : return None if tree . left : last = Solution . convert_nodes ( tree . left , last ) if last : last . right = tree tree . left = last last = tree if tree . right : last = Solution . convert_nodes ( tree . right , last ) return last","title":"\u9762\u8bd5\u989827 \u4e8c\u53c9\u641c\u7d22\u6811\u4e0e\u53cc\u5411\u94fe\u8868"},{"location":"docs/code-interviews-offer/chapter-forth/#28","text":"\u8981\u6c42\uff1a\u6c42\u8f93\u5165\u5b57\u7b26\u4e32\u7684\u5168\u6392\u5217 \u601d\u8def\uff1a\u9012\u5f52\u5b8c\u6210\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5e93\u51fd\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 def my_permutation ( s ): str_set = [] ret = [] # \u6700\u540e\u7684\u7ed3\u679c def permutation ( string ): for i in string : str_tem = string . replace ( i , '' ) str_set . append ( i ) if len ( str_tem ) > 0 : permutation ( str_tem ) else : ret . append ( '' . join ( str_set )) str_set . pop () permutation ( s ) return ret","title":"\u9762\u8bd5\u989828 \u5b57\u7b26\u4e32\u7684\u6392\u5217"},{"location":"docs/code-interviews-offer/chapter-second/","text":"\u7b2c2\u7ae0 \u00b6 \u7f16\u7a0b\u8bed\u8a00 \u00b6 \u9762\u8bd5\u98982 \u4f7f\u7528Python\u5b9e\u73b0\u5355\u4f8b\u6a21\u5f0f \u00b6 \u65b9\u6cd5\u4e00 \u4f7f\u7528__new__\u5b9e\u73b0\u5355\u4f8b\u6a21\u5f0f \u00b6 \u4f7f\u7528__new__\u5b9e\u73b0\u5355\u4f8b\u6a21\u5f0f\uff0c\u5177\u4f53\u6211\u5bf9__new__\u7684\u7406\u89e3\u53ef\u4ee5\u70b9 \u8fd9\u91cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 class SingleTon ( object ): _instance = {} def __new__ ( cls , * args , ** kwargs ): if cls not in cls . _instance : cls . _instance [ cls ] = super ( SingleTon , cls ) . __new__ ( cls , * args , ** kwargs ) # print cls._instance return cls . _instance [ cls ] class MyClass ( SingleTon ): class_val = 22 def __init__ ( self , val ): self . val = val def obj_fun ( self ): print self . val , 'obj_fun' @staticmethod def static_fun (): print 'staticmethod' @classmethod def class_fun ( cls ): print cls . class_val , 'classmethod' if __name__ == '__main__' : a = MyClass ( 1 ) b = MyClass ( 2 ) print a is b # True print id ( a ), id ( b ) # 4367665424 4367665424 # \u7c7b\u578b\u9a8c\u8bc1 print type ( a ) # <class '__main__.MyClass'> print type ( b ) # <class '__main__.MyClass'> \u65b9\u6cd5\u4e8c \u4f7f\u7528\u88c5\u9970\u5668\u5b9e\u73b0\u5355\u4f8b\u6a21\u5f0f \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 from functools import wraps def single_ton ( cls ): _instance = {} @wraps ( cls ) def single ( * args , ** kwargs ): if cls not in _instance : _instance [ cls ] = cls ( * args , ** kwargs ) return _instance [ cls ] return single @single_ton class SingleTon ( object ): val = 123 def __init__ ( self , a ): self . a = a if __name__ == '__main__' : s = SingleTon ( 1 ) t = SingleTon ( 2 ) print s is t print s . a , t . a print s . val , t . val \u65b9\u6cd5\u4e09 \u4f7f\u7528\u6a21\u5757\u5b9e\u73b0\u5355\u4f8b\u6a21\u5f0f \u00b6 \u53ef\u4ee5\u4f7f\u7528\u6a21\u5757\u521b\u5efa\u5355\u4f8b\u6a21\u5f0f\uff0c\u7136\u540e\u5728\u5176\u4ed6\u6a21\u5757\u4e2d\u5bfc\u5165\u8be5\u5355\u4f8b\uff0c\u8fd9\u4e2a\u9700\u8981\u6240\u6709\u4eba\u9075\u5b88\u5bfc\u5165\u89c4\u5219\uff0c\u4e0d\u7136\u5c31\u6ca1\u6cd5\u5b9e\u73b0\u5355\u4f8b\u4e86 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # use_module.py class SingleTon ( object ): def __init__ ( self , val ): self . val = val single = SingleTon ( 2 ) # test_module.py from use_module import single a = single b = single print a . val , b . val print a is b a . val = 233 print a . val , b . val \u65b9\u6cd5\u56db \u4f7f\u7528metaclass\u5b9e\u73b0\u5355\u4f8b\u6a21\u5f0f \u00b6 \u76ee\u524d\u6211\u5bf9\u5143\u7c7b\u8fd8\u4e86\u89e3\u4e0d\u6df1\uff0c\u4ee5\u540e\u6765\u586b\u5751 \u6570\u636e\u7ed3\u6784 \u00b6 \u9762\u8bd5\u98983 \u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e LeetCode \u00b6 \u9898\u76ee\uff1a\u4e8c\u7ef4\u6570\u7ec4\u4e2d\uff0c\u6bcf\u884c\u4ece\u5de6\u5230\u53f3\u9012\u589e\uff0c\u6bcf\u5217\u4ece\u4e0a\u5230\u4e0b\u9012\u589e\uff0c\u7ed9\u51fa\u4e00\u4e2a\u6570\uff0c\u5224\u65ad\u5b83\u662f\u5426\u5728\u6570\u7ec4\u4e2d \u601d\u8def\uff1a\u4ece\u5de6\u4e0b\u89d2\u6216\u8005\u53f3\u4e0a\u89d2\u5f00\u59cb\u6bd4\u8f83 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 def find_integer ( matrix , num ): \"\"\" :param matrix: [[]] :param num: int :return: bool \"\"\" if not matrix : return False rows , cols = len ( matrix ), len ( matrix [ 0 ]) row , col = rows - 1 , 0 while row >= 0 and col <= cols - 1 : if matrix [ row ][ col ] == num : return True elif matrix [ row ][ col ] > num : row -= 1 else : col += 1 return False \u9762\u8bd5\u98984 \u66ff\u6362\u7a7a\u683c \u00b6 \u9898\u76ee\uff1a\u628a\u5b57\u7b26\u4e32\u4e2d\u7684\u7a7a\u683c\u66ff\u6362\u6210'20%' \u65b9\u6cd51\uff1a\u76f4\u63a5\u4f7f\u7528Python\u5b57\u7b26\u4e32\u7684\u5185\u7f6e\u51fd\u6570 1 >>> ' a b ' . replace ( ' ' , '20%' ) \u65b9\u6cd52: \u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f 1 2 3 >>> import re >>> ret = re . compile ( ' ' ) >>> ret . sub ( '20%' , ' a b ' ) \u9762\u8bd5\u98985 \u4ece\u5c3e\u5230\u5934\u6253\u5370\u5355\u94fe\u8868 \u00b6 \u65b9\u6cd51\uff1a\u4f7f\u7528\u6808,\u53ef\u4ee5\u4f7f\u7528\u5217\u8868\u6a21\u62df 1 2 3 4 5 6 7 def print_links ( links ): stack = [] while links : stack . append ( links . val ) links = links . next while stack : print stack . pop () \u65b9\u6cd52\uff1a\u76f4\u63a5\u9012\u5f52 1 2 3 4 def print_link_recursion ( links ): if links : print_link_recursion ( links . next ) print links . val \u9762\u8bd5\u98986 \u91cd\u5efa\u4e8c\u53c9\u6811 LeetCode \u00b6 \u8981\u6c42\uff1a\u7528\u524d\u5e8f\u548c\u4e2d\u5e8f\u904d\u5386\u7ed3\u679c\u6784\u5efa\u4e8c\u53c9\u6811\uff0c\u904d\u5386\u7ed3\u679c\u4e2d\u4e0d\u5305\u542b\u91cd\u590d\u503c \u601d\u8def\uff1a\u524d\u5e8f\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\u6839\u7ed3\u70b9\u7684\u503c\uff0c\u5728\u4e2d\u5e8f\u4e2d\u627e\u5230\u8be5\u503c\uff0c\u4e2d\u5e8f\u4e2d\u8be5\u503c\u7684\u5de6\u8fb9\u7684\u5143\u7d20\u662f\u6839\u7ed3\u70b9\u7684\u5de6\u5b50\u6811\uff0c\u53f3\u8fb9\u662f\u53f3\u5b50\u6811\uff0c\u7136\u540e\u9012\u5f52\u7684\u5904\u7406\u5de6\u8fb9\u548c\u53f3\u8fb9 \u63d0\u793a \uff1a\u4e8c\u53c9\u6811\u7ed3\u70b9\uff0c\u4ee5\u53ca\u5bf9\u4e8c\u53c9\u6811\u7684\u5404\u79cd\u64cd\u4f5c\uff0c\u6d4b\u8bd5\u4ee3\u7801\u89c1six.py 1 2 3 4 5 6 7 8 9 10 11 12 13 def construct_tree ( preorder = None , inorder = None ): \"\"\" \u6784\u5efa\u4e8c\u53c9\u6811 \"\"\" if not preorder or not inorder : return None index = inorder . index ( preorder [ 0 ]) left = inorder [ 0 : index ] right = inorder [ index + 1 :] root = TreeNode ( preorder [ 0 ]) root . left = construct_tree ( preorder [ 1 : 1 + len ( left )], left ) root . right = construct_tree ( preorder [ - len ( right ):], right ) return root \u9762\u8bd5\u98987 \u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217 \u00b6 \u8981\u6c42\uff1a\u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217\uff0c\u5206\u522b\u5b9e\u73b0\u5165\u961f\u548c\u51fa\u961f\u64cd\u4f5c \u601d\u8def\uff1a\u4e00\u4e2a\u6808\u8d1f\u8d23\u5165\u961f\uff0c\u53e6\u4e00\u4e2a\u8d1f\u8d23\u51fa\u961f\uff0c\u51fa\u6808\u4e3a\u7a7a\u5219\u4ece\u5165\u6808\u4e2d\u5bfc\u5165\u5230\u51fa\u6808\u4e2d 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class MyQueue ( object ): def __init__ ( self ): self . stack = [] self . stack2 = [] def push ( self , val ): self . stack . append ( val ) def pop ( self ): if self . stack2 : return self . stack2 . pop () while self . stack : self . stack2 . append ( self . stack . pop ()) return self . stack2 . pop () if self . stack2 else u '\u961f\u5217\u4e3a\u7a7a' \u7b97\u6cd5\u548c\u6570\u636e\u64cd\u4f5c \u00b6 \u9762\u8bd5\u98988 \u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u6570\u5b57 \u00b6 \u8981\u6c42\uff1a\u628a\u9012\u589e\u6570\u7ec4\u7684\u524d\u9762\u90e8\u5206\u6570\u5b57\u79fb\u5230\u961f\u5c3e\uff0c\u6c42\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c\uff0c\u4f8b\u5982[3,4,5,6,1,2] \u601d\u8def\uff1a\u4f7f\u7528\u4e8c\u5206\u6cd5\uff0c\u4f46\u8981\u8003\u8651[1, 0, 0, 1]\u8fd9\u79cd\u6570\u636e\uff0c\u53ea\u80fd\u987a\u5e8f\u67e5\u627e 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 def find_min ( nums ): if not nums : return False length = len ( nums ) left , right = 0 , length - 1 while nums [ left ] >= nums [ right ]: if right - left == 1 : return nums [ right ] mid = ( left + right ) / 2 if nums [ left ] == nums [ mid ] == nums [ right ]: return min ( nums ) if nums [ left ] <= nums [ mid ]: left = mid if nums [ right ] >= nums [ mid ]: right = mid return nums [ 0 ] \u9762\u8bd5\u98989 \u6590\u6ce2\u90a3\u5951\u6570\u5217 \u00b6 \u601d\u8def\uff1a\u7528\u751f\u6210\u5668 1 2 3 4 5 def fib ( num ): a , b = 0 , 1 for i in xrange ( num ): yield b a , b = b , a + b \u9762\u8bd5\u989810 \u4e8c\u8fdb\u5236\u4e2d1\u7684\u4e2a\u6570 \u00b6 \u8981\u6c42\uff1a\u6c42\u4e00\u4e2a\u6574\u6570\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\uff0c1\u7684\u4e2a\u6570 \u601d\u8def\uff1a\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\uff0c\u6700\u540e\u7684\u90a3\u4e2a1\u88ab\u51cf\u53bb\u540e\uff0c\u4f4e\u4f4d\u90fd\u53d8\u4e3a0\uff0c\u9ad8\u4f4d\u4e0d\u53d8\uff0c\u6309\u4f4d\u4e0e\u5c31\u53ef\u4ee5\u53bb\u6389\u8fd9\u4e2a1 1 2 3 4 5 6 def num_of_1 ( n ): ret = 0 while n : ret += 1 n = n & n - 1 return ret","title":"\u7b2c2\u7ae0"},{"location":"docs/code-interviews-offer/chapter-second/#2","text":"","title":"\u7b2c2\u7ae0"},{"location":"docs/code-interviews-offer/chapter-second/#_1","text":"","title":"\u7f16\u7a0b\u8bed\u8a00"},{"location":"docs/code-interviews-offer/chapter-second/#2-python","text":"","title":"\u9762\u8bd5\u98982 \u4f7f\u7528Python\u5b9e\u73b0\u5355\u4f8b\u6a21\u5f0f"},{"location":"docs/code-interviews-offer/chapter-second/#_4","text":"","title":"\u6570\u636e\u7ed3\u6784"},{"location":"docs/code-interviews-offer/chapter-second/#3-leetcode","text":"\u9898\u76ee\uff1a\u4e8c\u7ef4\u6570\u7ec4\u4e2d\uff0c\u6bcf\u884c\u4ece\u5de6\u5230\u53f3\u9012\u589e\uff0c\u6bcf\u5217\u4ece\u4e0a\u5230\u4e0b\u9012\u589e\uff0c\u7ed9\u51fa\u4e00\u4e2a\u6570\uff0c\u5224\u65ad\u5b83\u662f\u5426\u5728\u6570\u7ec4\u4e2d \u601d\u8def\uff1a\u4ece\u5de6\u4e0b\u89d2\u6216\u8005\u53f3\u4e0a\u89d2\u5f00\u59cb\u6bd4\u8f83 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 def find_integer ( matrix , num ): \"\"\" :param matrix: [[]] :param num: int :return: bool \"\"\" if not matrix : return False rows , cols = len ( matrix ), len ( matrix [ 0 ]) row , col = rows - 1 , 0 while row >= 0 and col <= cols - 1 : if matrix [ row ][ col ] == num : return True elif matrix [ row ][ col ] > num : row -= 1 else : col += 1 return False","title":"\u9762\u8bd5\u98983 \u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e LeetCode"},{"location":"docs/code-interviews-offer/chapter-second/#4","text":"\u9898\u76ee\uff1a\u628a\u5b57\u7b26\u4e32\u4e2d\u7684\u7a7a\u683c\u66ff\u6362\u6210'20%' \u65b9\u6cd51\uff1a\u76f4\u63a5\u4f7f\u7528Python\u5b57\u7b26\u4e32\u7684\u5185\u7f6e\u51fd\u6570 1 >>> ' a b ' . replace ( ' ' , '20%' ) \u65b9\u6cd52: \u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f 1 2 3 >>> import re >>> ret = re . compile ( ' ' ) >>> ret . sub ( '20%' , ' a b ' )","title":"\u9762\u8bd5\u98984 \u66ff\u6362\u7a7a\u683c"},{"location":"docs/code-interviews-offer/chapter-second/#5","text":"\u65b9\u6cd51\uff1a\u4f7f\u7528\u6808,\u53ef\u4ee5\u4f7f\u7528\u5217\u8868\u6a21\u62df 1 2 3 4 5 6 7 def print_links ( links ): stack = [] while links : stack . append ( links . val ) links = links . next while stack : print stack . pop () \u65b9\u6cd52\uff1a\u76f4\u63a5\u9012\u5f52 1 2 3 4 def print_link_recursion ( links ): if links : print_link_recursion ( links . next ) print links . val","title":"\u9762\u8bd5\u98985 \u4ece\u5c3e\u5230\u5934\u6253\u5370\u5355\u94fe\u8868"},{"location":"docs/code-interviews-offer/chapter-second/#6-leetcode","text":"\u8981\u6c42\uff1a\u7528\u524d\u5e8f\u548c\u4e2d\u5e8f\u904d\u5386\u7ed3\u679c\u6784\u5efa\u4e8c\u53c9\u6811\uff0c\u904d\u5386\u7ed3\u679c\u4e2d\u4e0d\u5305\u542b\u91cd\u590d\u503c \u601d\u8def\uff1a\u524d\u5e8f\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\u6839\u7ed3\u70b9\u7684\u503c\uff0c\u5728\u4e2d\u5e8f\u4e2d\u627e\u5230\u8be5\u503c\uff0c\u4e2d\u5e8f\u4e2d\u8be5\u503c\u7684\u5de6\u8fb9\u7684\u5143\u7d20\u662f\u6839\u7ed3\u70b9\u7684\u5de6\u5b50\u6811\uff0c\u53f3\u8fb9\u662f\u53f3\u5b50\u6811\uff0c\u7136\u540e\u9012\u5f52\u7684\u5904\u7406\u5de6\u8fb9\u548c\u53f3\u8fb9 \u63d0\u793a \uff1a\u4e8c\u53c9\u6811\u7ed3\u70b9\uff0c\u4ee5\u53ca\u5bf9\u4e8c\u53c9\u6811\u7684\u5404\u79cd\u64cd\u4f5c\uff0c\u6d4b\u8bd5\u4ee3\u7801\u89c1six.py 1 2 3 4 5 6 7 8 9 10 11 12 13 def construct_tree ( preorder = None , inorder = None ): \"\"\" \u6784\u5efa\u4e8c\u53c9\u6811 \"\"\" if not preorder or not inorder : return None index = inorder . index ( preorder [ 0 ]) left = inorder [ 0 : index ] right = inorder [ index + 1 :] root = TreeNode ( preorder [ 0 ]) root . left = construct_tree ( preorder [ 1 : 1 + len ( left )], left ) root . right = construct_tree ( preorder [ - len ( right ):], right ) return root","title":"\u9762\u8bd5\u98986 \u91cd\u5efa\u4e8c\u53c9\u6811 LeetCode"},{"location":"docs/code-interviews-offer/chapter-second/#7","text":"\u8981\u6c42\uff1a\u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217\uff0c\u5206\u522b\u5b9e\u73b0\u5165\u961f\u548c\u51fa\u961f\u64cd\u4f5c \u601d\u8def\uff1a\u4e00\u4e2a\u6808\u8d1f\u8d23\u5165\u961f\uff0c\u53e6\u4e00\u4e2a\u8d1f\u8d23\u51fa\u961f\uff0c\u51fa\u6808\u4e3a\u7a7a\u5219\u4ece\u5165\u6808\u4e2d\u5bfc\u5165\u5230\u51fa\u6808\u4e2d 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class MyQueue ( object ): def __init__ ( self ): self . stack = [] self . stack2 = [] def push ( self , val ): self . stack . append ( val ) def pop ( self ): if self . stack2 : return self . stack2 . pop () while self . stack : self . stack2 . append ( self . stack . pop ()) return self . stack2 . pop () if self . stack2 else u '\u961f\u5217\u4e3a\u7a7a'","title":"\u9762\u8bd5\u98987 \u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217"},{"location":"docs/code-interviews-offer/chapter-second/#_5","text":"","title":"\u7b97\u6cd5\u548c\u6570\u636e\u64cd\u4f5c"},{"location":"docs/code-interviews-offer/chapter-second/#8","text":"\u8981\u6c42\uff1a\u628a\u9012\u589e\u6570\u7ec4\u7684\u524d\u9762\u90e8\u5206\u6570\u5b57\u79fb\u5230\u961f\u5c3e\uff0c\u6c42\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c\uff0c\u4f8b\u5982[3,4,5,6,1,2] \u601d\u8def\uff1a\u4f7f\u7528\u4e8c\u5206\u6cd5\uff0c\u4f46\u8981\u8003\u8651[1, 0, 0, 1]\u8fd9\u79cd\u6570\u636e\uff0c\u53ea\u80fd\u987a\u5e8f\u67e5\u627e 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 def find_min ( nums ): if not nums : return False length = len ( nums ) left , right = 0 , length - 1 while nums [ left ] >= nums [ right ]: if right - left == 1 : return nums [ right ] mid = ( left + right ) / 2 if nums [ left ] == nums [ mid ] == nums [ right ]: return min ( nums ) if nums [ left ] <= nums [ mid ]: left = mid if nums [ right ] >= nums [ mid ]: right = mid return nums [ 0 ]","title":"\u9762\u8bd5\u98988 \u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u6570\u5b57"},{"location":"docs/code-interviews-offer/chapter-second/#9","text":"\u601d\u8def\uff1a\u7528\u751f\u6210\u5668 1 2 3 4 5 def fib ( num ): a , b = 0 , 1 for i in xrange ( num ): yield b a , b = b , a + b","title":"\u9762\u8bd5\u98989 \u6590\u6ce2\u90a3\u5951\u6570\u5217"},{"location":"docs/code-interviews-offer/chapter-second/#10-1","text":"\u8981\u6c42\uff1a\u6c42\u4e00\u4e2a\u6574\u6570\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\uff0c1\u7684\u4e2a\u6570 \u601d\u8def\uff1a\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\uff0c\u6700\u540e\u7684\u90a3\u4e2a1\u88ab\u51cf\u53bb\u540e\uff0c\u4f4e\u4f4d\u90fd\u53d8\u4e3a0\uff0c\u9ad8\u4f4d\u4e0d\u53d8\uff0c\u6309\u4f4d\u4e0e\u5c31\u53ef\u4ee5\u53bb\u6389\u8fd9\u4e2a1 1 2 3 4 5 6 def num_of_1 ( n ): ret = 0 while n : ret += 1 n = n & n - 1 return ret","title":"\u9762\u8bd5\u989810 \u4e8c\u8fdb\u5236\u4e2d1\u7684\u4e2a\u6570"},{"location":"docs/code-interviews-offer/chapter-seventh/","text":"\u7b2c7\u7ae0 \u00b6 7.1 \u6848\u4f8b\u4e00 \u00b6 \u9762\u8bd5\u989849 \u628a\u5b57\u7b26\u4e32\u8f6c\u5316\u6210\u6574\u6570 \u00b6 \u8981\u6c42\uff1a\u628a\u5b57\u7b26\u4e32\u8f6c\u5316\u6210\u6574\u6570 \u6d4b\u8bd5\u7528\u4f8b\uff1a\u6b63\u8d1f\u6570\u548c0\uff0c\u7a7a\u5b57\u7b26\uff0c\u5305\u542b\u5176\u4ed6\u5b57\u7b26 \u5907\u6ce8\uff1a\u4f7f\u7528raise\u629b\u51fa\u5f02\u5e38\u4f5c\u4e3a\u975e\u6cd5\u63d0\u793a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 def str_to_int ( string ): if not string : # \u7a7a\u5b57\u7b26\u8fd4\u56de\u5f02\u5e38 raise Exception ( 'string cannot be None' , string ) flag = 0 # \u7528\u6765\u8868\u793a\u7b2c\u4e00\u4e2a\u5b57\u7b26\u662f\u5426\u4e3a+\u3001- ret = 0 # \u7ed3\u679c for k , s in enumerate ( string ): if s . isdigit (): # \u6570\u5b57\u76f4\u63a5\u8fd0\u7b97 val = ord ( s ) - ord ( '0' ) ret = ret * 10 + val else : if not flag : if s == '+' and k == 0 : # \u907f\u514d\u4e2d\u95f4\u51fa\u73b0+\u3001- flag = 1 elif s == '-' and k == 0 : flag = - 1 else : raise Exception ( 'digit is need' , string ) else : raise Exception ( 'digit is need' , string ) if flag and len ( string ) == 1 : # \u5224\u65ad\u662f\u4e0d\u662f\u53ea\u6709+\u3001- raise Exception ( 'digit is need' , string ) return ret if flag >= 0 else - ret 7.2 \u6848\u4f8b\u4e8c \u00b6 \u9762\u8bd5\u989850 \u6811\u4e2d\u4e24\u4e2a\u7ed3\u70b9\u7684\u6700\u4f4e\u516c\u5171\u7956\u5148 \u00b6 \u8981\u6c42\uff1a\u6c42\u666e\u901a\u4e8c\u53c9\u6811\u4e2d\u4e24\u4e2a\u7ed3\u70b9\u7684\u6700\u4f4e\u516c\u5171\u7956\u5148 \u65b9\u6cd5\u4e00\uff1a\u5148\u6c42\u51fa\u4e24\u4e2a\u7ed3\u70b9\u5230\u6839\u7ed3\u70b9\u7684\u8def\u5f84\uff0c\u7136\u540e\u4ece\u8def\u5f84\u4e2d\u627e\u51fa\u6700\u540e\u4e00\u4e2a\u516c\u5171\u7ed3\u70b9 \u5907\u6ce8\uff1a\u6587\u4ef6fifty.py\u4e2d\u5305\u542b\u8be5\u4ee3\u7801\u7684\u5177\u4f53\u6d4b\u8bd5\u6570\u636e 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 class Solution ( object ): def __init__ ( self , root , node1 , node2 ): self . root = root # \u6811\u7684\u6839\u7ed3\u70b9 self . node1 = node1 self . node2 = node2 # \u9700\u8981\u6c42\u7684\u4e24\u4e2a\u7ed3\u70b9 @staticmethod def get_path ( root , node , ret ): \"\"\"\u83b7\u53d6\u7ed3\u70b9\u7684\u8def\u5f84\"\"\" if not root or not node : return False ret . append ( root ) if root == node : return True left = Solution . get_path ( root . left , node , ret ) right = Solution . get_path ( root . right , node , ret ) if left or right : return True ret . pop () def get_last_common_node ( self ): \"\"\"\u83b7\u53d6\u516c\u5171\u7ed3\u70b9\"\"\" route1 = [] route2 = [] # \u4fdd\u5b58\u7ed3\u70b9\u8def\u5f84 ret1 = Solution . get_path ( self . root , self . node1 , route1 ) ret2 = Solution . get_path ( self . root , self . node2 , route2 ) ret = None if ret1 and ret2 : # \u8def\u5f84\u6bd4\u8f83 length = len ( route1 ) if len ( route1 ) <= len ( route2 ) else len ( route2 ) index = 0 while index < length : if route1 [ index ] == route2 [ index ]: ret = route1 [ index ] index += 1 return ret","title":"\u7b2c7\u7ae0"},{"location":"docs/code-interviews-offer/chapter-seventh/#7","text":"","title":"\u7b2c7\u7ae0"},{"location":"docs/code-interviews-offer/chapter-seventh/#71","text":"","title":"7.1 \u6848\u4f8b\u4e00"},{"location":"docs/code-interviews-offer/chapter-seventh/#49","text":"\u8981\u6c42\uff1a\u628a\u5b57\u7b26\u4e32\u8f6c\u5316\u6210\u6574\u6570 \u6d4b\u8bd5\u7528\u4f8b\uff1a\u6b63\u8d1f\u6570\u548c0\uff0c\u7a7a\u5b57\u7b26\uff0c\u5305\u542b\u5176\u4ed6\u5b57\u7b26 \u5907\u6ce8\uff1a\u4f7f\u7528raise\u629b\u51fa\u5f02\u5e38\u4f5c\u4e3a\u975e\u6cd5\u63d0\u793a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 def str_to_int ( string ): if not string : # \u7a7a\u5b57\u7b26\u8fd4\u56de\u5f02\u5e38 raise Exception ( 'string cannot be None' , string ) flag = 0 # \u7528\u6765\u8868\u793a\u7b2c\u4e00\u4e2a\u5b57\u7b26\u662f\u5426\u4e3a+\u3001- ret = 0 # \u7ed3\u679c for k , s in enumerate ( string ): if s . isdigit (): # \u6570\u5b57\u76f4\u63a5\u8fd0\u7b97 val = ord ( s ) - ord ( '0' ) ret = ret * 10 + val else : if not flag : if s == '+' and k == 0 : # \u907f\u514d\u4e2d\u95f4\u51fa\u73b0+\u3001- flag = 1 elif s == '-' and k == 0 : flag = - 1 else : raise Exception ( 'digit is need' , string ) else : raise Exception ( 'digit is need' , string ) if flag and len ( string ) == 1 : # \u5224\u65ad\u662f\u4e0d\u662f\u53ea\u6709+\u3001- raise Exception ( 'digit is need' , string ) return ret if flag >= 0 else - ret","title":"\u9762\u8bd5\u989849 \u628a\u5b57\u7b26\u4e32\u8f6c\u5316\u6210\u6574\u6570"},{"location":"docs/code-interviews-offer/chapter-seventh/#72","text":"","title":"7.2 \u6848\u4f8b\u4e8c"},{"location":"docs/code-interviews-offer/chapter-seventh/#50","text":"\u8981\u6c42\uff1a\u6c42\u666e\u901a\u4e8c\u53c9\u6811\u4e2d\u4e24\u4e2a\u7ed3\u70b9\u7684\u6700\u4f4e\u516c\u5171\u7956\u5148 \u65b9\u6cd5\u4e00\uff1a\u5148\u6c42\u51fa\u4e24\u4e2a\u7ed3\u70b9\u5230\u6839\u7ed3\u70b9\u7684\u8def\u5f84\uff0c\u7136\u540e\u4ece\u8def\u5f84\u4e2d\u627e\u51fa\u6700\u540e\u4e00\u4e2a\u516c\u5171\u7ed3\u70b9 \u5907\u6ce8\uff1a\u6587\u4ef6fifty.py\u4e2d\u5305\u542b\u8be5\u4ee3\u7801\u7684\u5177\u4f53\u6d4b\u8bd5\u6570\u636e 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 class Solution ( object ): def __init__ ( self , root , node1 , node2 ): self . root = root # \u6811\u7684\u6839\u7ed3\u70b9 self . node1 = node1 self . node2 = node2 # \u9700\u8981\u6c42\u7684\u4e24\u4e2a\u7ed3\u70b9 @staticmethod def get_path ( root , node , ret ): \"\"\"\u83b7\u53d6\u7ed3\u70b9\u7684\u8def\u5f84\"\"\" if not root or not node : return False ret . append ( root ) if root == node : return True left = Solution . get_path ( root . left , node , ret ) right = Solution . get_path ( root . right , node , ret ) if left or right : return True ret . pop () def get_last_common_node ( self ): \"\"\"\u83b7\u53d6\u516c\u5171\u7ed3\u70b9\"\"\" route1 = [] route2 = [] # \u4fdd\u5b58\u7ed3\u70b9\u8def\u5f84 ret1 = Solution . get_path ( self . root , self . node1 , route1 ) ret2 = Solution . get_path ( self . root , self . node2 , route2 ) ret = None if ret1 and ret2 : # \u8def\u5f84\u6bd4\u8f83 length = len ( route1 ) if len ( route1 ) <= len ( route2 ) else len ( route2 ) index = 0 while index < length : if route1 [ index ] == route2 [ index ]: ret = route1 [ index ] index += 1 return ret","title":"\u9762\u8bd5\u989850 \u6811\u4e2d\u4e24\u4e2a\u7ed3\u70b9\u7684\u6700\u4f4e\u516c\u5171\u7956\u5148"},{"location":"docs/code-interviews-offer/chapter-sixth/","text":"\u7b2c6\u7ae0 \u00b6 6.3 \u77e5\u8bc6\u8fc1\u79fb\u80fd\u529b \u00b6 \u9762\u8bd5\u989838 \u6570\u5b57\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570 \u00b6 \u601d\u8def: \u4f7f\u7528\u4e8c\u5206\u6cd5\u5206\u522b\u627e\u5230\u6570\u7ec4\u4e2d\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u51fa\u73b0\u7684\u503c\u7684\u5750\u6807\uff0c\u7136\u540e\u76f8\u51cf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 def get_k_counts ( nums , k ): first = get_first_k ( nums , k ) last = get_last_k ( nums , k ) if first < 0 and last < 0 : return 0 if first < 0 or last < 0 : return 1 return last - first + 1 def get_first_k ( nums , k ): left , right = 0 , len ( nums ) - 1 while left <= right : mid = ( left + right ) / 2 if nums [ mid ] < k : if mid + 1 < len ( nums ) and nums [ mid + 1 ] == k : return mid + 1 left = mid + 1 elif nums [ mid ] == k : if mid - 1 < 0 or ( mid - 1 >= 0 and nums [ mid - 1 ] < k ): return mid right = mid - 1 else : right = mid - 1 return - 1 def get_last_k ( nums , k ): left , right = 0 , len ( nums ) - 1 while left <= right : mid = ( left + right ) / 2 if nums [ mid ] < k : left = mid + 1 elif nums [ mid ] == k : if mid + 1 == len ( nums ) or ( mid + 1 < len ( nums ) and nums [ mid + 1 ] > k ): return mid left = mid + 1 else : if mid - 1 >= 0 and nums [ mid - 1 ] == k : return mid - 1 right = mid - 1 return - 1 \u9762\u8bd5\u989839 \u4e8c\u53c9\u6811\u7684\u6df1\u5ea6 \u00b6 \u601d\u8def: \u5206\u522b\u9012\u5f52\u7684\u6c42\u5de6\u53f3\u5b50\u6811\u7684\u6df1\u5ea6 1 2 3 4 5 6 def get_depth ( tree ): if not tree : return 0 if not tree . left and not tree . right : return 1 return 1 + max ( get_depth ( tree . left ), get_depth ( tree . right )) \u9762\u8bd5\u989840 \u6570\u7ec4\u4e2d\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 \u00b6 \u8981\u6c42\uff1a\u6570\u7ec4\u4e2d\u9664\u4e86\u4e24\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\u5916\uff0c\u5176\u4ed6\u6570\u5b57\u90fd\u51fa\u73b0\u4e86\u4e24\u904d \u601d\u8def: \u6309\u4f4d\u5f02\u6216\uff0c\u5728\u5f97\u5230\u7684\u503c\u4e2d\u627e\u5230\u4e8c\u8fdb\u5236\u6700\u540e\u4e00\u4e2a1\uff0c\u7136\u540e\u628a\u6570\u7ec4\u6309\u7167\u8be5\u4f4d\u662f0\u8fd8\u662f1\u5206\u4e3a\u4e24\u7ec4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 def get_only_one_number ( nums ): if not nums : return None tmp_ret = 0 for n in nums : # \u83b7\u53d6\u4e24\u4e2a\u503c\u7684\u5f02\u6216\u7ed3\u679c tmp_ret ^= n last_one = get_bin ( tmp_ret ) a_ret , b_ret = 0 , 0 for n in nums : if is_one ( n , last_one ): a_ret ^= n else : b_ret ^= n return [ a_ret , b_ret ] def get_bin ( num ): # \u5f97\u5230\u7b2c\u4e00\u4e2a1 ret = 0 while num & 1 == 0 and ret < 32 : num = num >> 1 ret += 1 return ret def is_one ( num , t ): # \u9a8c\u8bc1t\u4f4d\u662f\u4e0d\u662f1 num = num >> t return num & 0x01 \u9762\u8bd5\u989841 \u548c\u4e3as\u7684\u4e24\u4e2a\u6570\u5b57VS\u548c\u4e3as\u7684\u8fde\u7eed\u6b63\u6570\u5e8f\u5217 \u00b6 \u548c\u4e3as\u7684\u4e24\u4e2a\u6570\u5b57 \u00b6 \u8981\u6c42\uff1a\u8f93\u5165\u4e00\u4e2a\u9012\u589e\u6392\u5e8f\u7684\u6570\u7ec4\u548c\u4e00\u4e2a\u6570\u5b57s\uff0c\u5728\u6570\u7ec4\u4e2d\u67e5\u627e\u4e24\u4e2a\u6570\uff0c\u4f7f\u5176\u548c\u4e3as \u601d\u8def: \u8bbe\u7f6e\u5934\u5c3e\u4e24\u4e2a\u6307\u9488\uff0c\u548c\u5927\u4e8es\uff0c\u5c3e\u6307\u9488\u51cf\u5c0f\uff0c\u5426\u7838\u5934\u6307\u9488\u589e\u52a0 1 2 3 4 5 6 7 8 9 10 def sum_to_s ( nums , s ): head , end = 0 , len ( nums ) - 1 while head < end : if nums [ head ] + nums [ end ] == s : return [ nums [ head ], nums [ end ]] elif nums [ head ] + nums [ end ] > s : end -= 1 else : head += 1 return None \u548c\u4e3as\u7684\u8fde\u7eed\u6574\u6570\u5e8f\u5217 \u00b6 \u8981\u6c42\uff1a\u8f93\u5165\u4e00\u4e2a\u6b63\u6570s\uff0c \u6253\u5370\u51fa\u6240\u6709\u548c\u4e3as\u7684\u6b63\u6574\u6570\u5e8f\u5217(\u81f3\u5c11\u4e24\u4e2a\u6570) \u601d\u8def: \u4f7f\u7528\u4e24\u4e2a\u6307\u9488\uff0c\u548c\u6bd4s\u5c0f\uff0c\u5927\u6307\u9488\u540e\u79fb\uff0c\u6bd4s\u5927\uff0c\u5c0f\u6307\u9488\u540e\u79fb 1 2 3 4 5 6 7 8 9 10 11 12 def sum_to_s ( s ): a , b = 1 , 2 ret = [] while a < s / 2 + 1 : if sum ( range ( a , b + 1 )) == s : ret . append ( range ( a , b + 1 )) a += 1 elif sum ( range ( a , b + 1 )) < s : b += 1 else : a += 1 return ret \u9762\u8bd5\u989842 \u7ffb\u8f6c\u5355\u8bcd\u987a\u5e8f\u4e0e\u5de6\u65cb\u8f6c\u5b57\u7b26\u4e32 \u00b6 \u7ffb\u8f6c\u5355\u8bcd\u987a\u5e8f \u00b6 \u8981\u6c42\uff1a\u7ffb\u8f6c\u4e00\u4e2a\u82f1\u6587\u53e5\u5b50\u4e2d\u7684\u5355\u8bcd\u987a\u5e8f\uff0c\u6807\u70b9\u548c\u666e\u901a\u5b57\u7b26\u4e00\u6837\u5904\u7406 \u601d\u8def: Python\u4e2d\u5b57\u7b26\u4e32\u662f\u4e0d\u53ef\u53d8\u5bf9\u8c61\uff0c\u4e0d\u80fd\u7528\u4e66\u4e2d\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u76f4\u63a5\u8f6c\u5316\u6210\u5217\u8868\u7136\u540e\u8f6c\u56de\u53bb 1 2 3 def reverse_words ( sentence ): tmp = sentence . split () return ' ' . join ( tmp [:: - 1 ]) # \u4f7f\u7528join\u6548\u7387\u66f4\u597d\uff0c+\u6bcf\u6b21\u90fd\u4f1a\u521b\u5efa\u65b0\u7684\u5b57\u7b26\u4e32 \u5de6\u65cb\u8f6c\u5b57\u7b26\u4e32 \u00b6 \u601d\u8def: \u628a\u5b57\u7b26\u4e32\u7684\u524d\u9762\u7684\u82e5\u5e72\u4f4d\u79fb\u5230\u5b57\u7b26\u4e32\u7684\u540e\u9762 1 2 3 4 5 def rotate_string ( s , n ): if not s : return '' n %= len ( s ) return s [ n :] + s [: n ] 6.4 \u62bd\u8c61\u5efa\u6a21\u80fd\u529b \u00b6 \u9762\u8bd5\u989843 n\u4e2a\u9ab0\u5b50\u7684\u70b9\u6570 \u00b6 \u8981\u6c42\uff1a\u6c42\u51fan\u4e2a\u9ab0\u5b50\u671d\u4e0a\u4e00\u9762\u4e4b\u548cs\u6240\u6709\u53ef\u80fd\u503c\u51fa\u73b0\u7684\u6982\u7387 \u601d\u8def\uff1an\u51fa\u73b0\u7684\u53ef\u80fd\u662f\u524d\u9762n-1\u5230n-6\u51fa\u73b0\u53ef\u80fd\u7684\u548c\uff0c\u8bbe\u7f6e\u4e24\u4e2a\u6570\u7ec4\uff0c\u5206\u522b\u4fdd\u5b58\u6bcf\u4e00\u8f6e 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 def get_probability ( n ): if n < 1 : return [] data1 = [ 0 ] + [ 1 ] * 6 + [ 0 ] * 6 * ( n - 1 ) data2 = [ 0 ] + [ 0 ] * 6 * n # \u5f00\u5934\u591a\u4e00\u4e2a0\uff0c\u65b9\u4fbf\u6309\u7167\u4e60\u60ef\u4ece1\u8ba1\u6570 flag = 0 for v in range ( 2 , n + 1 ): # \u63a7\u5236\u6b21\u6570 if flag : for k in range ( v , 6 * v + 1 ): data1 [ k ] = sum ([ data2 [ k - j ] for j in range ( 1 , 7 ) if k > j ]) flag = 0 else : for k in range ( v , 6 * v + 1 ): data2 [ k ] = sum ([ data1 [ k - j ] for j in range ( 1 , 7 ) if k > j ]) flag = 1 ret = [] total = 6 ** n data = data2 [ n :] if flag else data1 [ n :] for v in data : ret . append ( v * 1.0 / total ) print data return ret \u9762\u8bd5\u989844 \u6251\u514b\u724c\u7684\u987a\u5b50 \u00b6 \u8981\u6c42\uff1a\u4ece\u6251\u514b\u724c\u4e2d\u968f\u673a\u62bd\u53d65\u5f20\u724c\uff0c\u5224\u65ad\u662f\u4e0d\u662f\u987a\u5b50\uff0c\u5927\u5c0f\u738b\u53ef\u4ee5\u5f53\u4efb\u610f\u503c \u601d\u8def: \u4f7f\u7528\u6392\u5e8f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import random def is_continus ( nums , k ): data = [ random . choice ( nums ) for _ in range ( k )] data . sort () print data zero = data . count ( 0 ) small , big = zero , zero + 1 while big < k : if data [ small ] == data [ big ]: return False tmp = data [ big ] - data [ small ] if tmp > 1 : if tmp - 1 > zero : return False else : zero -= tmp - 1 small += 1 big += 1 else : small += 1 big += 1 return True \u9762\u8bd5\u989845 \u5706\u5708\u4e2d\u6700\u540e\u5269\u4e0b\u7684\u6570\u5b57 \u00b6 \u8981\u6c42\uff1a0\u5230n-1\u6392\u6210\u4e00\u5708\uff0c\u4ece0\u5f00\u59cb\u6bcf\u6b21\u6570m\u4e2a\u6570\u5220\u9664\uff0c\u6c42\u6700\u540e\u5269\u4f59\u7684\u6570 \u601d\u8def\uff1a\u5f53 n > 1 \u65f6\uff1a f(n,m) = [f(n-1, m)+m]%n,\u5f53 n = 1 \u65f6\uff1a f(n,m)=0\uff0c \u5173\u952e\u662f\u63a8\u5bfc\u51fa\u5173\u7cfb\u8868\u8fbe\u5f0f 1 2 3 4 5 6 7 def last_num ( n , m ): ret = 0 if n == 1 : return 0 for i in range ( 2 , n + 1 ): ret = ( m + ret ) % i return ret 6.5 \u53d1\u6563\u601d\u7ef4\u80fd\u529b \u00b6 \u9762\u8bd5\u989846 \u6c421+2...+n \u00b6 \u8981\u6c42\uff1a\u4e0d\u80fd\u4f7f\u7528\u4e58\u9664\u3001for\u3001while\u3001if\u3001else\u7b49 \u65b9\u6cd5\u4e00\uff1a\u4f7f\u7528range\u548csum \u65b9\u6cd5\u4e8c\uff1a\u4f7f\u7528reduce 1 2 3 4 5 6 def get_sum1 ( n ): return sum ( range ( 1 , n + 1 )) def get_sum2 ( n ): return reduce ( lambda x , y : x + y , range ( 1 , n + 1 )) \u9762\u8bd5\u989847 \u4e0d\u7528\u52a0\u51cf\u4e58\u9664\u505a\u52a0\u6cd5 \u00b6 \u8981\u6c42\uff1a\u4e0d\u7528\u52a0\u51cf\u4e58\u9664\u505a\u52a0\u6cd5 \u65b9\u6cd5\u4e00\uff1a\u4f7f\u7528\u4f4d\u8fd0\u7b97\uff0cPython\u4e2d\u5927\u6574\u6570\u4f1a\u81ea\u52a8\u5904\u7406\uff0c\u56e0\u6b64\u5bf9carry\u9700\u8981\u52a0\u4e2a\u5224\u65ad \u65b9\u6cd5\u4e8c\uff1a\u4f7f\u7528sum 1 2 3 4 5 6 7 8 9 10 11 12 13 def bit_add ( n1 , n2 ): carry = 1 while carry : s = n1 ^ n2 carry = 0xFFFFFFFF & (( n1 & n2 ) << 1 ) carry = - ( ~ ( carry - 1 ) & 0xFFFFFFFF ) if carry > 0x7FFFFFFF else carry n1 = s n2 = carry return n1 def add ( n1 , n2 ): return sum ([ n1 , n2 ]) \u9762\u8bd5\u989848 \u4e0d\u80fd\u88ab\u7ee7\u627f\u7684\u7c7b \u00b6 Python\u4e2d\u4e0d\u77e5\u9053\u600e\u4e48\u5b9e\u73b0\u4e0d\u80fd\u88ab\u7ee7\u627f\u7684\u7c7b\u3002\u4ee5\u540e\u8865\u5145\u4ee3\u7801\u6216\u8005\u539f\u56e0\u3002","title":"\u7b2c6\u7ae0"},{"location":"docs/code-interviews-offer/chapter-sixth/#6","text":"","title":"\u7b2c6\u7ae0"},{"location":"docs/code-interviews-offer/chapter-sixth/#63","text":"","title":"6.3 \u77e5\u8bc6\u8fc1\u79fb\u80fd\u529b"},{"location":"docs/code-interviews-offer/chapter-sixth/#38","text":"\u601d\u8def: \u4f7f\u7528\u4e8c\u5206\u6cd5\u5206\u522b\u627e\u5230\u6570\u7ec4\u4e2d\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u51fa\u73b0\u7684\u503c\u7684\u5750\u6807\uff0c\u7136\u540e\u76f8\u51cf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 def get_k_counts ( nums , k ): first = get_first_k ( nums , k ) last = get_last_k ( nums , k ) if first < 0 and last < 0 : return 0 if first < 0 or last < 0 : return 1 return last - first + 1 def get_first_k ( nums , k ): left , right = 0 , len ( nums ) - 1 while left <= right : mid = ( left + right ) / 2 if nums [ mid ] < k : if mid + 1 < len ( nums ) and nums [ mid + 1 ] == k : return mid + 1 left = mid + 1 elif nums [ mid ] == k : if mid - 1 < 0 or ( mid - 1 >= 0 and nums [ mid - 1 ] < k ): return mid right = mid - 1 else : right = mid - 1 return - 1 def get_last_k ( nums , k ): left , right = 0 , len ( nums ) - 1 while left <= right : mid = ( left + right ) / 2 if nums [ mid ] < k : left = mid + 1 elif nums [ mid ] == k : if mid + 1 == len ( nums ) or ( mid + 1 < len ( nums ) and nums [ mid + 1 ] > k ): return mid left = mid + 1 else : if mid - 1 >= 0 and nums [ mid - 1 ] == k : return mid - 1 right = mid - 1 return - 1","title":"\u9762\u8bd5\u989838 \u6570\u5b57\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570"},{"location":"docs/code-interviews-offer/chapter-sixth/#39","text":"\u601d\u8def: \u5206\u522b\u9012\u5f52\u7684\u6c42\u5de6\u53f3\u5b50\u6811\u7684\u6df1\u5ea6 1 2 3 4 5 6 def get_depth ( tree ): if not tree : return 0 if not tree . left and not tree . right : return 1 return 1 + max ( get_depth ( tree . left ), get_depth ( tree . right ))","title":"\u9762\u8bd5\u989839 \u4e8c\u53c9\u6811\u7684\u6df1\u5ea6"},{"location":"docs/code-interviews-offer/chapter-sixth/#40","text":"\u8981\u6c42\uff1a\u6570\u7ec4\u4e2d\u9664\u4e86\u4e24\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\u5916\uff0c\u5176\u4ed6\u6570\u5b57\u90fd\u51fa\u73b0\u4e86\u4e24\u904d \u601d\u8def: \u6309\u4f4d\u5f02\u6216\uff0c\u5728\u5f97\u5230\u7684\u503c\u4e2d\u627e\u5230\u4e8c\u8fdb\u5236\u6700\u540e\u4e00\u4e2a1\uff0c\u7136\u540e\u628a\u6570\u7ec4\u6309\u7167\u8be5\u4f4d\u662f0\u8fd8\u662f1\u5206\u4e3a\u4e24\u7ec4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 def get_only_one_number ( nums ): if not nums : return None tmp_ret = 0 for n in nums : # \u83b7\u53d6\u4e24\u4e2a\u503c\u7684\u5f02\u6216\u7ed3\u679c tmp_ret ^= n last_one = get_bin ( tmp_ret ) a_ret , b_ret = 0 , 0 for n in nums : if is_one ( n , last_one ): a_ret ^= n else : b_ret ^= n return [ a_ret , b_ret ] def get_bin ( num ): # \u5f97\u5230\u7b2c\u4e00\u4e2a1 ret = 0 while num & 1 == 0 and ret < 32 : num = num >> 1 ret += 1 return ret def is_one ( num , t ): # \u9a8c\u8bc1t\u4f4d\u662f\u4e0d\u662f1 num = num >> t return num & 0x01","title":"\u9762\u8bd5\u989840 \u6570\u7ec4\u4e2d\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57"},{"location":"docs/code-interviews-offer/chapter-sixth/#41-svss","text":"","title":"\u9762\u8bd5\u989841 \u548c\u4e3as\u7684\u4e24\u4e2a\u6570\u5b57VS\u548c\u4e3as\u7684\u8fde\u7eed\u6b63\u6570\u5e8f\u5217"},{"location":"docs/code-interviews-offer/chapter-sixth/#s","text":"\u8981\u6c42\uff1a\u8f93\u5165\u4e00\u4e2a\u9012\u589e\u6392\u5e8f\u7684\u6570\u7ec4\u548c\u4e00\u4e2a\u6570\u5b57s\uff0c\u5728\u6570\u7ec4\u4e2d\u67e5\u627e\u4e24\u4e2a\u6570\uff0c\u4f7f\u5176\u548c\u4e3as \u601d\u8def: \u8bbe\u7f6e\u5934\u5c3e\u4e24\u4e2a\u6307\u9488\uff0c\u548c\u5927\u4e8es\uff0c\u5c3e\u6307\u9488\u51cf\u5c0f\uff0c\u5426\u7838\u5934\u6307\u9488\u589e\u52a0 1 2 3 4 5 6 7 8 9 10 def sum_to_s ( nums , s ): head , end = 0 , len ( nums ) - 1 while head < end : if nums [ head ] + nums [ end ] == s : return [ nums [ head ], nums [ end ]] elif nums [ head ] + nums [ end ] > s : end -= 1 else : head += 1 return None","title":"\u548c\u4e3as\u7684\u4e24\u4e2a\u6570\u5b57"},{"location":"docs/code-interviews-offer/chapter-sixth/#s_1","text":"\u8981\u6c42\uff1a\u8f93\u5165\u4e00\u4e2a\u6b63\u6570s\uff0c \u6253\u5370\u51fa\u6240\u6709\u548c\u4e3as\u7684\u6b63\u6574\u6570\u5e8f\u5217(\u81f3\u5c11\u4e24\u4e2a\u6570) \u601d\u8def: \u4f7f\u7528\u4e24\u4e2a\u6307\u9488\uff0c\u548c\u6bd4s\u5c0f\uff0c\u5927\u6307\u9488\u540e\u79fb\uff0c\u6bd4s\u5927\uff0c\u5c0f\u6307\u9488\u540e\u79fb 1 2 3 4 5 6 7 8 9 10 11 12 def sum_to_s ( s ): a , b = 1 , 2 ret = [] while a < s / 2 + 1 : if sum ( range ( a , b + 1 )) == s : ret . append ( range ( a , b + 1 )) a += 1 elif sum ( range ( a , b + 1 )) < s : b += 1 else : a += 1 return ret","title":"\u548c\u4e3as\u7684\u8fde\u7eed\u6574\u6570\u5e8f\u5217"},{"location":"docs/code-interviews-offer/chapter-sixth/#42","text":"","title":"\u9762\u8bd5\u989842 \u7ffb\u8f6c\u5355\u8bcd\u987a\u5e8f\u4e0e\u5de6\u65cb\u8f6c\u5b57\u7b26\u4e32"},{"location":"docs/code-interviews-offer/chapter-sixth/#_1","text":"\u8981\u6c42\uff1a\u7ffb\u8f6c\u4e00\u4e2a\u82f1\u6587\u53e5\u5b50\u4e2d\u7684\u5355\u8bcd\u987a\u5e8f\uff0c\u6807\u70b9\u548c\u666e\u901a\u5b57\u7b26\u4e00\u6837\u5904\u7406 \u601d\u8def: Python\u4e2d\u5b57\u7b26\u4e32\u662f\u4e0d\u53ef\u53d8\u5bf9\u8c61\uff0c\u4e0d\u80fd\u7528\u4e66\u4e2d\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u76f4\u63a5\u8f6c\u5316\u6210\u5217\u8868\u7136\u540e\u8f6c\u56de\u53bb 1 2 3 def reverse_words ( sentence ): tmp = sentence . split () return ' ' . join ( tmp [:: - 1 ]) # \u4f7f\u7528join\u6548\u7387\u66f4\u597d\uff0c+\u6bcf\u6b21\u90fd\u4f1a\u521b\u5efa\u65b0\u7684\u5b57\u7b26\u4e32","title":"\u7ffb\u8f6c\u5355\u8bcd\u987a\u5e8f"},{"location":"docs/code-interviews-offer/chapter-sixth/#_2","text":"\u601d\u8def: \u628a\u5b57\u7b26\u4e32\u7684\u524d\u9762\u7684\u82e5\u5e72\u4f4d\u79fb\u5230\u5b57\u7b26\u4e32\u7684\u540e\u9762 1 2 3 4 5 def rotate_string ( s , n ): if not s : return '' n %= len ( s ) return s [ n :] + s [: n ]","title":"\u5de6\u65cb\u8f6c\u5b57\u7b26\u4e32"},{"location":"docs/code-interviews-offer/chapter-sixth/#64","text":"","title":"6.4 \u62bd\u8c61\u5efa\u6a21\u80fd\u529b"},{"location":"docs/code-interviews-offer/chapter-sixth/#43-n","text":"\u8981\u6c42\uff1a\u6c42\u51fan\u4e2a\u9ab0\u5b50\u671d\u4e0a\u4e00\u9762\u4e4b\u548cs\u6240\u6709\u53ef\u80fd\u503c\u51fa\u73b0\u7684\u6982\u7387 \u601d\u8def\uff1an\u51fa\u73b0\u7684\u53ef\u80fd\u662f\u524d\u9762n-1\u5230n-6\u51fa\u73b0\u53ef\u80fd\u7684\u548c\uff0c\u8bbe\u7f6e\u4e24\u4e2a\u6570\u7ec4\uff0c\u5206\u522b\u4fdd\u5b58\u6bcf\u4e00\u8f6e 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 def get_probability ( n ): if n < 1 : return [] data1 = [ 0 ] + [ 1 ] * 6 + [ 0 ] * 6 * ( n - 1 ) data2 = [ 0 ] + [ 0 ] * 6 * n # \u5f00\u5934\u591a\u4e00\u4e2a0\uff0c\u65b9\u4fbf\u6309\u7167\u4e60\u60ef\u4ece1\u8ba1\u6570 flag = 0 for v in range ( 2 , n + 1 ): # \u63a7\u5236\u6b21\u6570 if flag : for k in range ( v , 6 * v + 1 ): data1 [ k ] = sum ([ data2 [ k - j ] for j in range ( 1 , 7 ) if k > j ]) flag = 0 else : for k in range ( v , 6 * v + 1 ): data2 [ k ] = sum ([ data1 [ k - j ] for j in range ( 1 , 7 ) if k > j ]) flag = 1 ret = [] total = 6 ** n data = data2 [ n :] if flag else data1 [ n :] for v in data : ret . append ( v * 1.0 / total ) print data return ret","title":"\u9762\u8bd5\u989843 n\u4e2a\u9ab0\u5b50\u7684\u70b9\u6570"},{"location":"docs/code-interviews-offer/chapter-sixth/#44","text":"\u8981\u6c42\uff1a\u4ece\u6251\u514b\u724c\u4e2d\u968f\u673a\u62bd\u53d65\u5f20\u724c\uff0c\u5224\u65ad\u662f\u4e0d\u662f\u987a\u5b50\uff0c\u5927\u5c0f\u738b\u53ef\u4ee5\u5f53\u4efb\u610f\u503c \u601d\u8def: \u4f7f\u7528\u6392\u5e8f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import random def is_continus ( nums , k ): data = [ random . choice ( nums ) for _ in range ( k )] data . sort () print data zero = data . count ( 0 ) small , big = zero , zero + 1 while big < k : if data [ small ] == data [ big ]: return False tmp = data [ big ] - data [ small ] if tmp > 1 : if tmp - 1 > zero : return False else : zero -= tmp - 1 small += 1 big += 1 else : small += 1 big += 1 return True","title":"\u9762\u8bd5\u989844 \u6251\u514b\u724c\u7684\u987a\u5b50"},{"location":"docs/code-interviews-offer/chapter-sixth/#45","text":"\u8981\u6c42\uff1a0\u5230n-1\u6392\u6210\u4e00\u5708\uff0c\u4ece0\u5f00\u59cb\u6bcf\u6b21\u6570m\u4e2a\u6570\u5220\u9664\uff0c\u6c42\u6700\u540e\u5269\u4f59\u7684\u6570 \u601d\u8def\uff1a\u5f53 n > 1 \u65f6\uff1a f(n,m) = [f(n-1, m)+m]%n,\u5f53 n = 1 \u65f6\uff1a f(n,m)=0\uff0c \u5173\u952e\u662f\u63a8\u5bfc\u51fa\u5173\u7cfb\u8868\u8fbe\u5f0f 1 2 3 4 5 6 7 def last_num ( n , m ): ret = 0 if n == 1 : return 0 for i in range ( 2 , n + 1 ): ret = ( m + ret ) % i return ret","title":"\u9762\u8bd5\u989845 \u5706\u5708\u4e2d\u6700\u540e\u5269\u4e0b\u7684\u6570\u5b57"},{"location":"docs/code-interviews-offer/chapter-sixth/#65","text":"","title":"6.5 \u53d1\u6563\u601d\u7ef4\u80fd\u529b"},{"location":"docs/code-interviews-offer/chapter-sixth/#46-12n","text":"\u8981\u6c42\uff1a\u4e0d\u80fd\u4f7f\u7528\u4e58\u9664\u3001for\u3001while\u3001if\u3001else\u7b49 \u65b9\u6cd5\u4e00\uff1a\u4f7f\u7528range\u548csum \u65b9\u6cd5\u4e8c\uff1a\u4f7f\u7528reduce 1 2 3 4 5 6 def get_sum1 ( n ): return sum ( range ( 1 , n + 1 )) def get_sum2 ( n ): return reduce ( lambda x , y : x + y , range ( 1 , n + 1 ))","title":"\u9762\u8bd5\u989846 \u6c421+2...+n"},{"location":"docs/code-interviews-offer/chapter-sixth/#47","text":"\u8981\u6c42\uff1a\u4e0d\u7528\u52a0\u51cf\u4e58\u9664\u505a\u52a0\u6cd5 \u65b9\u6cd5\u4e00\uff1a\u4f7f\u7528\u4f4d\u8fd0\u7b97\uff0cPython\u4e2d\u5927\u6574\u6570\u4f1a\u81ea\u52a8\u5904\u7406\uff0c\u56e0\u6b64\u5bf9carry\u9700\u8981\u52a0\u4e2a\u5224\u65ad \u65b9\u6cd5\u4e8c\uff1a\u4f7f\u7528sum 1 2 3 4 5 6 7 8 9 10 11 12 13 def bit_add ( n1 , n2 ): carry = 1 while carry : s = n1 ^ n2 carry = 0xFFFFFFFF & (( n1 & n2 ) << 1 ) carry = - ( ~ ( carry - 1 ) & 0xFFFFFFFF ) if carry > 0x7FFFFFFF else carry n1 = s n2 = carry return n1 def add ( n1 , n2 ): return sum ([ n1 , n2 ])","title":"\u9762\u8bd5\u989847 \u4e0d\u7528\u52a0\u51cf\u4e58\u9664\u505a\u52a0\u6cd5"},{"location":"docs/code-interviews-offer/chapter-sixth/#48","text":"Python\u4e2d\u4e0d\u77e5\u9053\u600e\u4e48\u5b9e\u73b0\u4e0d\u80fd\u88ab\u7ee7\u627f\u7684\u7c7b\u3002\u4ee5\u540e\u8865\u5145\u4ee3\u7801\u6216\u8005\u539f\u56e0\u3002","title":"\u9762\u8bd5\u989848 \u4e0d\u80fd\u88ab\u7ee7\u627f\u7684\u7c7b"},{"location":"docs/code-interviews-offer/chapter-third/","text":"\u7b2c3\u7ae0 \u00b6 3.3 \u4ee3\u7801\u7684\u5b8c\u6574\u6027 \u00b6 \u9762\u8bd5\u989811 \u6570\u503c\u7684\u6574\u6570\u6b21\u65b9 \u00b6 \u8981\u6c42\uff1a\u6c42\u4e00\u4e2a\u6570\u7684\u6574\u6570\u6b21\u65b9 \u601d\u8def\uff1a\u9700\u8981\u8003\u8651\u6b21\u65b9\u662f\u6b63\u6570\u3001\u8d1f\u6570\u548c0\uff0c\u57fa\u6570\u662f0 \u6d6e\u70b9\u6570\u76f8\u7b49\u4e0d\u80fd\u76f4\u63a5\u7528== 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 def power ( base , exponent ): if equal_zero ( base ) and exponent < 0 : raise ZeroDivisionError ret = power_value ( base , abs ( exponent )) if exponent < 0 : return 1.0 / ret else : return ret def equal_zero ( num ): if abs ( num - 0.0 ) < 0.0000001 : return True def power_value ( base , exponent ): if exponent == 0 : return 1 if exponent == 1 : return base ret = power_value ( base , exponent >> 1 ) ret *= ret if exponent & 1 == 1 : ret *= base return ret \u9762\u8bd5\u989812 \u6253\u53701\u5230\u6700\u5927\u7684n\u4f4d\u6570 \u00b6 \u8981\u6c42\uff1a\u8f93\u5165n\uff0c\u6253\u5370\u51fa\u4ece1\u5230\u6700\u5927\u7684n\u4f4d\u6570 \u601d\u8def\uff1aPython\u4e2d\u5df2\u7ecf\u5bf9\u5927\u6574\u6570\u53ef\u4ee5\u8fdb\u884c\u81ea\u52a8\u8f6c\u6362\u4e86\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u8003\u8651\u5927\u6574\u6570\u6ea2\u51fa\u95ee\u9898 1 2 3 def print_max_n ( n ): for i in xrange ( 10 ** n ): print i \u9762\u8bd5\u989813 O(1)\u65f6\u95f4\u5220\u9664\u94fe\u8868\u7ed3\u70b9 \u00b6 \u8981\u6c42\uff1aO(1)\u65f6\u95f4\u5220\u9664\u94fe\u8868\u7ed3\u70b9 \u601d\u8def\uff1a\u5982\u679c\u6709\u540e\u7eed\u7ed3\u70b9\uff0c\u540e\u7eed\u7ed3\u70b9\u7684\u503c\u524d\u79fb\uff0c\u5220\u9664\u540e\u7eed\u7ed3\u70b9\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u53ea\u80fd\u987a\u5e8f\u67e5\u627e\u4e86 1 2 3 4 5 6 7 8 9 10 11 12 13 def delete_node ( link , node ): if node == link : # \u53ea\u6709\u4e00\u4e2a\u7ed3\u70b9 del node if node . next is None : # node\u662f\u5c3e\u7ed3\u70b9 while link : if link . next == node : link . next = None link = link . next else : node . val = node . next . val n_node = node . next node . next = n_node . next del n_node \u9762\u8bd5\u989814 \u8c03\u6574\u6570\u7ec4\u987a\u5e8f\u4f7f\u5947\u6570\u4f4d\u4e8e\u5076\u6570\u524d\u9762 \u00b6 \u601d\u8def\uff1a\u4f7f\u7528\u4e24\u4e2a\u6307\u9488\uff0c\u524d\u540e\u5404\u4e00\u4e2a\uff0c\u4e3a\u4e86\u66f4\u597d\u7684\u6269\u5c55\u6027\uff0c\u53ef\u4ee5\u628a\u5224\u65ad\u5947\u5076\u90e8\u5206\u62bd\u53d6\u51fa\u6765 1 2 3 4 5 6 7 8 9 10 11 12 13 def reorder ( nums , func ): left , right = 0 , len ( nums ) - 1 while left < right : while not func ( nums [ left ]): left += 1 while func ( nums [ right ]): right -= 1 if left < right : nums [ left ], nums [ right ] = nums [ right ], nums [ left ] def is_even ( num ): return ( num & 1 ) == 0 3.4 \u4ee3\u7801\u7684\u9c81\u68d2\u6027 \u00b6 \u9762\u8bd5\u989815 \u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u7ed3\u70b9 \u00b6 \u8981\u6c42\uff1a\u6c42\u5355\u94fe\u8868\u4e2d\u7684\u5012\u6570\u7b2ck\u4e2a\u7ed3\u70b9 \u601d\u8def\uff1a\u4f7f\u7528\u5feb\u6162\u6307\u9488\uff0c\u5feb\u7684\u5148\u8d70k-1\u6b65\uff0c\u9700\u8981\u8003\u8651\u7a7a\u94fe\u8868\u4ee5\u53cak\u4e3a0 1 2 3 4 5 6 7 8 9 10 11 12 13 def last_kth ( link , k ): if not link or k <= 0 : return None move = link while move and k - 1 >= 0 : move = move . next k -= 1 while move : move = move . next link = link . next if k == 0 : return link . val return None \u9762\u8bd5\u989816 \u53cd\u8f6c\u94fe\u8868 \u00b6 \u8981\u6c42\uff1a\u53cd\u8f6c\u94fe\u8868 \u601d\u8def\uff1a\u9700\u8981\u8003\u8651\u7a7a\u94fe\u8868\uff0c\u53ea\u6709\u4e00\u4e2a\u7ed3\u70b9\u7684\u94fe\u8868 1 2 3 4 5 6 7 8 9 10 11 12 13 def reverse_link ( head ): if not head or not head . next : return head then = head . next head . next = None last = then . next while then : then . next = head head = then then = last if then : last = then . next return head \u9762\u8bd5\u989817 \u5408\u5e76\u4e24\u4e2a\u6392\u5e8f\u7684\u94fe\u8868 \u00b6 \u8981\u6c42\uff1a\u5408\u5e76\u4e24\u4e2a\u6392\u5e8f\u7684\u94fe\u8868 \u601d\u8def\uff1a\u4f7f\u7528\u9012\u5f52 1 2 3 4 5 6 7 8 9 10 11 12 def merge_link ( head1 , head2 ): if not head1 : return head2 if not head2 : return head1 if head1 . val <= head2 . val : ret = head1 ret . next = merge_link ( head1 . next , head2 ) else : ret = head2 ret . next = merge_link ( head1 , head2 . next ) return ret \u9762\u8bd5\u989818 \u6811\u7684\u5b50\u7ed3\u6784 \u00b6 \u8981\u6c42\uff1a\u5224\u65ad\u4e00\u68f5\u4e8c\u53c9\u6811\u662f\u4e0d\u662f\u53e6\u4e00\u4e2a\u7684\u5b50\u7ed3\u6784 \u601d\u8def\uff1a\u4f7f\u7528\u9012\u5f52 1 2 3 4 5 6 7 8 9 def sub_tree ( tree1 , tree2 ): if tree1 and tree2 : if tree1 . val == tree2 . val : return sub_tree ( tree1 . left , tree2 . left ) and sub_tree ( tree1 . right , tree2 . right ) else : return sub_tree ( tree1 . left , tree2 ) or sub_tree ( tree1 . right , tree2 ) if not tree1 and tree2 : return False return True","title":"\u7b2c3\u7ae0"},{"location":"docs/code-interviews-offer/chapter-third/#3","text":"","title":"\u7b2c3\u7ae0"},{"location":"docs/code-interviews-offer/chapter-third/#33","text":"","title":"3.3 \u4ee3\u7801\u7684\u5b8c\u6574\u6027"},{"location":"docs/code-interviews-offer/chapter-third/#11","text":"\u8981\u6c42\uff1a\u6c42\u4e00\u4e2a\u6570\u7684\u6574\u6570\u6b21\u65b9 \u601d\u8def\uff1a\u9700\u8981\u8003\u8651\u6b21\u65b9\u662f\u6b63\u6570\u3001\u8d1f\u6570\u548c0\uff0c\u57fa\u6570\u662f0 \u6d6e\u70b9\u6570\u76f8\u7b49\u4e0d\u80fd\u76f4\u63a5\u7528== 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 def power ( base , exponent ): if equal_zero ( base ) and exponent < 0 : raise ZeroDivisionError ret = power_value ( base , abs ( exponent )) if exponent < 0 : return 1.0 / ret else : return ret def equal_zero ( num ): if abs ( num - 0.0 ) < 0.0000001 : return True def power_value ( base , exponent ): if exponent == 0 : return 1 if exponent == 1 : return base ret = power_value ( base , exponent >> 1 ) ret *= ret if exponent & 1 == 1 : ret *= base return ret","title":"\u9762\u8bd5\u989811 \u6570\u503c\u7684\u6574\u6570\u6b21\u65b9"},{"location":"docs/code-interviews-offer/chapter-third/#12-1n","text":"\u8981\u6c42\uff1a\u8f93\u5165n\uff0c\u6253\u5370\u51fa\u4ece1\u5230\u6700\u5927\u7684n\u4f4d\u6570 \u601d\u8def\uff1aPython\u4e2d\u5df2\u7ecf\u5bf9\u5927\u6574\u6570\u53ef\u4ee5\u8fdb\u884c\u81ea\u52a8\u8f6c\u6362\u4e86\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u8003\u8651\u5927\u6574\u6570\u6ea2\u51fa\u95ee\u9898 1 2 3 def print_max_n ( n ): for i in xrange ( 10 ** n ): print i","title":"\u9762\u8bd5\u989812 \u6253\u53701\u5230\u6700\u5927\u7684n\u4f4d\u6570"},{"location":"docs/code-interviews-offer/chapter-third/#13-o1","text":"\u8981\u6c42\uff1aO(1)\u65f6\u95f4\u5220\u9664\u94fe\u8868\u7ed3\u70b9 \u601d\u8def\uff1a\u5982\u679c\u6709\u540e\u7eed\u7ed3\u70b9\uff0c\u540e\u7eed\u7ed3\u70b9\u7684\u503c\u524d\u79fb\uff0c\u5220\u9664\u540e\u7eed\u7ed3\u70b9\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u53ea\u80fd\u987a\u5e8f\u67e5\u627e\u4e86 1 2 3 4 5 6 7 8 9 10 11 12 13 def delete_node ( link , node ): if node == link : # \u53ea\u6709\u4e00\u4e2a\u7ed3\u70b9 del node if node . next is None : # node\u662f\u5c3e\u7ed3\u70b9 while link : if link . next == node : link . next = None link = link . next else : node . val = node . next . val n_node = node . next node . next = n_node . next del n_node","title":"\u9762\u8bd5\u989813 O(1)\u65f6\u95f4\u5220\u9664\u94fe\u8868\u7ed3\u70b9"},{"location":"docs/code-interviews-offer/chapter-third/#14","text":"\u601d\u8def\uff1a\u4f7f\u7528\u4e24\u4e2a\u6307\u9488\uff0c\u524d\u540e\u5404\u4e00\u4e2a\uff0c\u4e3a\u4e86\u66f4\u597d\u7684\u6269\u5c55\u6027\uff0c\u53ef\u4ee5\u628a\u5224\u65ad\u5947\u5076\u90e8\u5206\u62bd\u53d6\u51fa\u6765 1 2 3 4 5 6 7 8 9 10 11 12 13 def reorder ( nums , func ): left , right = 0 , len ( nums ) - 1 while left < right : while not func ( nums [ left ]): left += 1 while func ( nums [ right ]): right -= 1 if left < right : nums [ left ], nums [ right ] = nums [ right ], nums [ left ] def is_even ( num ): return ( num & 1 ) == 0","title":"\u9762\u8bd5\u989814 \u8c03\u6574\u6570\u7ec4\u987a\u5e8f\u4f7f\u5947\u6570\u4f4d\u4e8e\u5076\u6570\u524d\u9762"},{"location":"docs/code-interviews-offer/chapter-third/#34","text":"","title":"3.4 \u4ee3\u7801\u7684\u9c81\u68d2\u6027"},{"location":"docs/code-interviews-offer/chapter-third/#15-k","text":"\u8981\u6c42\uff1a\u6c42\u5355\u94fe\u8868\u4e2d\u7684\u5012\u6570\u7b2ck\u4e2a\u7ed3\u70b9 \u601d\u8def\uff1a\u4f7f\u7528\u5feb\u6162\u6307\u9488\uff0c\u5feb\u7684\u5148\u8d70k-1\u6b65\uff0c\u9700\u8981\u8003\u8651\u7a7a\u94fe\u8868\u4ee5\u53cak\u4e3a0 1 2 3 4 5 6 7 8 9 10 11 12 13 def last_kth ( link , k ): if not link or k <= 0 : return None move = link while move and k - 1 >= 0 : move = move . next k -= 1 while move : move = move . next link = link . next if k == 0 : return link . val return None","title":"\u9762\u8bd5\u989815 \u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u7ed3\u70b9"},{"location":"docs/code-interviews-offer/chapter-third/#16","text":"\u8981\u6c42\uff1a\u53cd\u8f6c\u94fe\u8868 \u601d\u8def\uff1a\u9700\u8981\u8003\u8651\u7a7a\u94fe\u8868\uff0c\u53ea\u6709\u4e00\u4e2a\u7ed3\u70b9\u7684\u94fe\u8868 1 2 3 4 5 6 7 8 9 10 11 12 13 def reverse_link ( head ): if not head or not head . next : return head then = head . next head . next = None last = then . next while then : then . next = head head = then then = last if then : last = then . next return head","title":"\u9762\u8bd5\u989816 \u53cd\u8f6c\u94fe\u8868"},{"location":"docs/code-interviews-offer/chapter-third/#17","text":"\u8981\u6c42\uff1a\u5408\u5e76\u4e24\u4e2a\u6392\u5e8f\u7684\u94fe\u8868 \u601d\u8def\uff1a\u4f7f\u7528\u9012\u5f52 1 2 3 4 5 6 7 8 9 10 11 12 def merge_link ( head1 , head2 ): if not head1 : return head2 if not head2 : return head1 if head1 . val <= head2 . val : ret = head1 ret . next = merge_link ( head1 . next , head2 ) else : ret = head2 ret . next = merge_link ( head1 , head2 . next ) return ret","title":"\u9762\u8bd5\u989817 \u5408\u5e76\u4e24\u4e2a\u6392\u5e8f\u7684\u94fe\u8868"},{"location":"docs/code-interviews-offer/chapter-third/#18","text":"\u8981\u6c42\uff1a\u5224\u65ad\u4e00\u68f5\u4e8c\u53c9\u6811\u662f\u4e0d\u662f\u53e6\u4e00\u4e2a\u7684\u5b50\u7ed3\u6784 \u601d\u8def\uff1a\u4f7f\u7528\u9012\u5f52 1 2 3 4 5 6 7 8 9 def sub_tree ( tree1 , tree2 ): if tree1 and tree2 : if tree1 . val == tree2 . val : return sub_tree ( tree1 . left , tree2 . left ) and sub_tree ( tree1 . right , tree2 . right ) else : return sub_tree ( tree1 . left , tree2 ) or sub_tree ( tree1 . right , tree2 ) if not tree1 and tree2 : return False return True","title":"\u9762\u8bd5\u989818 \u6811\u7684\u5b50\u7ed3\u6784"},{"location":"docs/code-interviews-offer/overview/","text":"\u5251\u6307Offer \u00b6 \u7b2c2\u7ae0 \u9762\u8bd5\u57fa\u7840\u77e5\u8bc6 \u00b6 2.2 \u7f16\u7a0b\u8bed\u8a00 \u00b6 \u9762\u8bd5\u98982 \u4f7f\u7528Python\u5b9e\u73b0\u5355\u4f8b\u6a21\u5f0f \u00b6 2.3 \u6570\u636e\u7ed3\u6784 \u00b6 \u9762\u8bd5\u98983 \u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e \u00b6 \u9762\u8bd5\u98984 \u66ff\u6362\u7a7a\u683c \u00b6 \u9762\u8bd5\u98985 \u4ece\u5c3e\u5230\u5934\u6253\u5370\u5355\u94fe\u8868 \u00b6 \u9762\u8bd5\u98986 \u91cd\u5efa\u4e8c\u53c9\u6811 \u00b6 \u9762\u8bd5\u98987 \u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217 \u00b6 2.4 \u7b97\u6cd5\u548c\u6570\u636e\u64cd\u4f5c \u00b6 \u9762\u8bd5\u98988 \u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u6570\u5b57 \u00b6 \u9762\u8bd5\u98989 \u6590\u6ce2\u90a3\u5951\u6570\u5217 \u00b6 \u9762\u8bd5\u989810 \u4e8c\u8fdb\u5236\u4e2d1\u7684\u4e2a\u6570 \u00b6 \u7b2c3\u7ae0 \u9ad8\u8d28\u91cf\u4ee3\u7801 \u00b6 3.3 \u4ee3\u7801\u7684\u5b8c\u6574\u6027 \u00b6 \u9762\u8bd5\u989811 \u6570\u503c\u7684\u6574\u6570\u6b21\u65b9 \u00b6 \u9762\u8bd5\u989812 \u6253\u53701\u5230\u6700\u5927\u7684n\u4f4d\u6570 \u00b6 \u9762\u8bd5\u989813 O(1)\u65f6\u95f4\u5220\u9664\u94fe\u8868\u7ed3\u70b9 \u00b6 \u9762\u8bd5\u989814 \u8c03\u6574\u6570\u7ec4\u987a\u5e8f\u4f7f\u5bc4\u6570\u4f4d\u4e8e\u5076\u6570\u524d\u9762 \u00b6 3.4 \u4ee3\u7801\u7684\u9c81\u68d2\u6027 \u00b6 \u9762\u8bd5\u989815 \u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u7ed3\u70b9 \u00b6 \u9762\u8bd5\u989816 \u53cd\u8f6c\u94fe\u8868 \u00b6 \u9762\u8bd5\u989817 \u5408\u5e76\u4e24\u4e2a\u6392\u5e8f\u7684\u94fe\u8868 \u00b6 \u9762\u8bd5\u989818 \u6811\u7684\u5b50\u7ed3\u6784 \u00b6 \u7b2c4\u7ae0 \u89e3\u51b3\u9762\u8bd5\u9898\u601d\u8def \u00b6 4.2 \u753b\u56fe\u8ba9\u62bd\u8c61\u95ee\u9898\u5f62\u8c61\u5316 \u00b6 \u9762\u8bd5\u989819 \u4e8c\u53c9\u6811\u7684\u955c\u50cf \u00b6 \u9762\u8bd5\u989820 \u987a\u65f6\u9488\u6253\u5370\u77e9\u9635 \u00b6 4.3 \u4e3e\u4f8b\u8ba9\u62bd\u8c61\u95ee\u9898\u5177\u4f53\u5316 \u00b6 \u9762\u8bd5\u989821 \u5305\u542bmin\u51fd\u6570\u7684\u6808 \u00b6 \u9762\u8bd5\u989822 \u6808\u7684\u538b\u5165\u5f39\u51fa\u5e8f\u5217 \u00b6 \u9762\u8bd5\u989823 \u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\u4e8c\u53c9\u6811 \u00b6 \u9762\u8bd5\u989824 \u4e8c\u53c9\u6811\u7684\u540e\u5e8f\u904d\u5386\u5e8f\u5217 \u00b6 \u9762\u8bd5\u989825 \u4e8c\u53c9\u6811\u4e2d\u548c\u4e3a\u67d0\u4e00\u503c\u7684\u8def\u5f84 \u00b6 4.4 \u5206\u89e3\u8ba9\u590d\u6742\u95ee\u9898\u7b80\u5355\u5316 \u00b6 \u9762\u8bd5\u989826 \u590d\u6742\u94fe\u8868\u7684\u590d\u5236 \u00b6 \u9762\u8bd5\u989827 \u4e8c\u53c9\u641c\u7d22\u6811\u4e0e\u53cc\u5411\u94fe\u8868 \u00b6 \u9762\u8bd5\u989828 \u5b57\u7b26\u4e32\u7684\u6392\u5217 \u00b6 \u7b2c5\u7ae0 \u4f18\u5316\u65f6\u95f4\u548c\u7a7a\u95f4\u6548\u7387 \u00b6 5.2 \u65f6\u95f4\u6548\u7387 \u00b6 \u9762\u8bd5\u989829 \u6570\u7ec4\u4e2d\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7\u4e00\u534a\u7684\u6570\u5b57 \u00b6 \u9762\u8bd5\u989830 \u6700\u5c0f\u7684k\u4e2a\u6570 \u00b6 \u9762\u8bd5\u989831 \u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c \u00b6 \u9762\u8bd5\u989832 \u4ece1\u5230n\u6574\u6570\u4e2d1\u51fa\u73b0\u7684\u6b21\u6570 \u00b6 \u9762\u8bd5\u989833 \u628a\u6570\u7ec4\u6392\u6210\u6700\u5c0f\u7684\u6570 \u00b6 5.3 \u65f6\u95f4\u6548\u7387\u4e0e\u7a7a\u95f4\u6548\u7387\u7684\u5e73\u8861 \u00b6 \u9762\u8bd5\u989834 \u4e11\u6570 \u00b6 \u9762\u8bd5\u989835 \u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26 \u00b6 \u9762\u8bd5\u989836 \u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9 \u00b6 \u9762\u8bd5\u989837 \u4e24\u4e2a\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u516c\u5171\u7ed3\u70b9 \u00b6 \u7b2c6\u7ae0 \u9762\u8bd5\u80fd\u529b \u00b6 6.3 \u77e5\u8bc6\u8fc1\u79fb\u80fd\u529b \u00b6 \u9762\u8bd5\u989838 \u6570\u5b57\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570 \u00b6 \u9762\u8bd5\u989839 \u4e8c\u53c9\u6811\u7684\u6df1\u5ea6 \u00b6 \u9762\u8bd5\u989840 \u6570\u7ec4\u4e2d\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 \u00b6 \u9762\u8bd5\u989841 \u548c\u4e3as\u7684\u4e24\u4e2a\u6570\u5b57VS\u548c\u4e3as\u7684\u8fde\u7eed\u6b63\u6570\u5e8f\u5217 \u00b6 \u9762\u8bd5\u989842 \u7ffb\u8f6c\u5355\u8bcd\u987a\u5e8f\u4e0e\u5de6\u65cb\u8f6c\u5b57\u7b26\u4e32 \u00b6 6.4 \u62bd\u8c61\u5efa\u6a21\u80fd\u529b \u00b6 \u9762\u8bd5\u989843 n\u4e2a\u9ab0\u5b50\u7684\u70b9\u6570 \u00b6 \u9762\u8bd5\u989844 \u6251\u514b\u724c\u7684\u987a\u5b50 \u00b6 \u9762\u8bd5\u989845 \u5706\u5708\u4e2d\u6700\u540e\u5269\u4e0b\u7684\u6570\u5b57 \u00b6 6.5 \u53d1\u6563\u601d\u7ef4\u80fd\u529b \u00b6 \u9762\u8bd5\u989846 \u6c421+2...+n \u00b6 \u9762\u8bd5\u989847 \u4e0d\u7528\u52a0\u51cf\u4e58\u9664\u505a\u52a0\u6cd5 \u00b6 \u9762\u8bd5\u989848 \u4e0d\u80fd\u88ab\u7ee7\u627f\u7684\u7c7b \u00b6 \u7b2c7\u7ae0 \u9762\u8bd5\u6848\u4f8b \u00b6 7.1 \u6848\u4f8b\u4e00 \u00b6 \u9762\u8bd5\u989849 \u628a\u5b57\u7b26\u4e32\u8f6c\u5316\u6210\u6574\u6570 \u00b6 7.2 \u6848\u4f8b\u4e8c \u00b6 \u9762\u8bd5\u989850 \u6811\u4e2d\u4e24\u4e2a\u7ed3\u70b9\u7684\u6700\u4f4e\u516c\u5171\u7956\u5148 \u00b6","title":"\u9898\u76ee\u6c47\u603b"},{"location":"docs/code-interviews-offer/overview/#offer","text":"","title":"\u5251\u6307Offer"},{"location":"docs/code-interviews-offer/overview/#2","text":"","title":"\u7b2c2\u7ae0 \u9762\u8bd5\u57fa\u7840\u77e5\u8bc6"},{"location":"docs/code-interviews-offer/overview/#22","text":"","title":"2.2 \u7f16\u7a0b\u8bed\u8a00"},{"location":"docs/code-interviews-offer/overview/#23","text":"","title":"2.3 \u6570\u636e\u7ed3\u6784"},{"location":"docs/code-interviews-offer/overview/#24","text":"","title":"2.4 \u7b97\u6cd5\u548c\u6570\u636e\u64cd\u4f5c"},{"location":"docs/code-interviews-offer/overview/#3_1","text":"","title":"\u7b2c3\u7ae0 \u9ad8\u8d28\u91cf\u4ee3\u7801"},{"location":"docs/code-interviews-offer/overview/#33","text":"","title":"3.3 \u4ee3\u7801\u7684\u5b8c\u6574\u6027"},{"location":"docs/code-interviews-offer/overview/#34","text":"","title":"3.4 \u4ee3\u7801\u7684\u9c81\u68d2\u6027"},{"location":"docs/code-interviews-offer/overview/#4_1","text":"","title":"\u7b2c4\u7ae0 \u89e3\u51b3\u9762\u8bd5\u9898\u601d\u8def"},{"location":"docs/code-interviews-offer/overview/#42","text":"","title":"4.2 \u753b\u56fe\u8ba9\u62bd\u8c61\u95ee\u9898\u5f62\u8c61\u5316"},{"location":"docs/code-interviews-offer/overview/#43","text":"","title":"4.3 \u4e3e\u4f8b\u8ba9\u62bd\u8c61\u95ee\u9898\u5177\u4f53\u5316"},{"location":"docs/code-interviews-offer/overview/#44","text":"","title":"4.4 \u5206\u89e3\u8ba9\u590d\u6742\u95ee\u9898\u7b80\u5355\u5316"},{"location":"docs/code-interviews-offer/overview/#5_1","text":"","title":"\u7b2c5\u7ae0 \u4f18\u5316\u65f6\u95f4\u548c\u7a7a\u95f4\u6548\u7387"},{"location":"docs/code-interviews-offer/overview/#52","text":"","title":"5.2 \u65f6\u95f4\u6548\u7387"},{"location":"docs/code-interviews-offer/overview/#53","text":"","title":"5.3 \u65f6\u95f4\u6548\u7387\u4e0e\u7a7a\u95f4\u6548\u7387\u7684\u5e73\u8861"},{"location":"docs/code-interviews-offer/overview/#6_1","text":"","title":"\u7b2c6\u7ae0 \u9762\u8bd5\u80fd\u529b"},{"location":"docs/code-interviews-offer/overview/#63","text":"","title":"6.3 \u77e5\u8bc6\u8fc1\u79fb\u80fd\u529b"},{"location":"docs/code-interviews-offer/overview/#64","text":"","title":"6.4 \u62bd\u8c61\u5efa\u6a21\u80fd\u529b"},{"location":"docs/code-interviews-offer/overview/#65","text":"","title":"6.5 \u53d1\u6563\u601d\u7ef4\u80fd\u529b"},{"location":"docs/code-interviews-offer/overview/#7_1","text":"","title":"\u7b2c7\u7ae0 \u9762\u8bd5\u6848\u4f8b"},{"location":"docs/code-interviews-offer/overview/#71","text":"","title":"7.1 \u6848\u4f8b\u4e00"},{"location":"docs/code-interviews-offer/overview/#72","text":"","title":"7.2 \u6848\u4f8b\u4e8c"},{"location":"docs/friends-link/friends-link/","text":"\u53cb\u60c5\u94fe\u63a5 \u00b6 @markoxu Practice makes perfect.","title":"\u53cb\u60c5\u94fe\u63a5"},{"location":"docs/friends-link/friends-link/#_1","text":"@markoxu Practice makes perfect.","title":"\u53cb\u60c5\u94fe\u63a5"},{"location":"docs/leetcode/overview/","text":"Leetcode \u00b6","title":"\u9898\u76ee\u6c47\u603b"},{"location":"docs/leetcode/overview/#leetcode","text":"","title":"Leetcode"},{"location":"docs/market-center/dpyt/","text":"\u5927\u76d8\u4e91\u56fe \u00b6 \u98ce\u9669\u63d0\u793a\u4e0e\u6570\u636e\u8bf4\u660e -10% -5% 0% 5% 10% * \u677f\u5757\u6309\u7167\u7533\u4e07\u884c\u4e1a\u5206\u7c7b\uff0c\u9762\u79ef\u8d8a\u5927\u5219\u5e02\u503c\u8d8a\u5927\uff0c\u7ea2\u7eff\u6df1\u6d45\u4ee3\u8868\u6da8\u8dcc\u5e45\u5ea6\u5927\u5c0f\u3002 * \u91cd\u8981\u63d0\u793a\uff1a\u6295\u8d44\u6709\u98ce\u9669\uff0c\u51b3\u7b56\u9700\u8c28\u614e\u3002\u7f51\u7ad9\u6570\u636e\u4ec5\u4f9b\u53c2\u8003\uff0c\u4e0d\u6784\u6210\u4efb\u4f55\u6295\u8d44\u5efa\u8bae\u3002","title":"\u5927\u76d8\u4e91\u56fe"},{"location":"docs/market-center/dpyt/#_1","text":"\u98ce\u9669\u63d0\u793a\u4e0e\u6570\u636e\u8bf4\u660e -10% -5% 0% 5% 10% * \u677f\u5757\u6309\u7167\u7533\u4e07\u884c\u4e1a\u5206\u7c7b\uff0c\u9762\u79ef\u8d8a\u5927\u5219\u5e02\u503c\u8d8a\u5927\uff0c\u7ea2\u7eff\u6df1\u6d45\u4ee3\u8868\u6da8\u8dcc\u5e45\u5ea6\u5927\u5c0f\u3002 * \u91cd\u8981\u63d0\u793a\uff1a\u6295\u8d44\u6709\u98ce\u9669\uff0c\u51b3\u7b56\u9700\u8c28\u614e\u3002\u7f51\u7ad9\u6570\u636e\u4ec5\u4f9b\u53c2\u8003\uff0c\u4e0d\u6784\u6210\u4efb\u4f55\u6295\u8d44\u5efa\u8bae\u3002","title":"\u5927\u76d8\u4e91\u56fe"},{"location":"docs/market-center/overview/","text":"\u884c\u60c5\u6c47\u603b \u00b6","title":"\u884c\u60c5\u6c47\u603b"},{"location":"docs/market-center/overview/#_1","text":"","title":"\u884c\u60c5\u6c47\u603b"},{"location":"docs/market-center/zdtj/","text":"\u6da8\u8dcc\u7edf\u8ba1 \u00b6 \u6da8\u8dcc\u6307\u6570 \u00b6 \u6da8\u8dcc\u5206\u5e03 \u00b6 \u6da8\u8dcc\u505c\u6570 \u00b6 \u98ce\u9669\u63d0\u793a\u4e0e\u6570\u636e\u8bf4\u660e * \u91cd\u8981\u63d0\u793a\uff1a\u6295\u8d44\u6709\u98ce\u9669\uff0c\u51b3\u7b56\u9700\u8c28\u614e\u3002\u7f51\u7ad9\u6570\u636e\u4ec5\u4f9b\u53c2\u8003\uff0c\u4e0d\u6784\u6210\u4efb\u4f55\u6295\u8d44\u5efa\u8bae\u3002","title":"\u6da8\u8dcc\u7edf\u8ba1"},{"location":"docs/market-center/zdtj/#_1","text":"","title":"\u6da8\u8dcc\u7edf\u8ba1"},{"location":"docs/market-center/zdtj/#_2","text":"","title":"\u6da8\u8dcc\u6307\u6570"},{"location":"docs/market-center/zdtj/#_3","text":"","title":"\u6da8\u8dcc\u5206\u5e03"},{"location":"docs/market-center/zdtj/#_4","text":"\u98ce\u9669\u63d0\u793a\u4e0e\u6570\u636e\u8bf4\u660e * \u91cd\u8981\u63d0\u793a\uff1a\u6295\u8d44\u6709\u98ce\u9669\uff0c\u51b3\u7b56\u9700\u8c28\u614e\u3002\u7f51\u7ad9\u6570\u636e\u4ec5\u4f9b\u53c2\u8003\uff0c\u4e0d\u6784\u6210\u4efb\u4f55\u6295\u8d44\u5efa\u8bae\u3002","title":"\u6da8\u8dcc\u505c\u6570"},{"location":"docs/market-center/zsgz/","text":"\u6307\u6570\u4f30\u503c \u00b6 \u98ce\u9669\u63d0\u793a\u4e0e\u6570\u636e\u8bf4\u660e \u4f30\u503c\u8f83\u4f4e\uff0cPE\u6216PB\u767e\u5206\u4f4d<30%\uff0c\u4e14PE\u5c0f\u4e8e20\uff1b \u4f30\u503c\u9002\u4e2d\uff0cPE\u6216PB\u767e\u5206\u4f4d<30%\uff0c\u6216PE\u5c0f\u4e8e20\uff1b \u4f30\u503c\u8f83\u9ad8\uff0cPE\u6216PB\u767e\u5206\u4f4d>70%\uff0c\u4e14PE\u5927\u4e8e20\uff1b \u6307\u6570\u6570\u636e\u65f6\u95f4\u8fc7\u77ed\uff0c\u6545\u4e0d\u53c2\u4e0e\u4f30\u503c\uff1b \u5e38\u7528\u4f30\u503c\u6307\u6807\u8bf4\u660e\uff1a \u2460 PE/PB\u6307\u5e02\u76c8\u7387/\u5e02\u51c0\u7387\uff0c\u4e00\u822c\u6570\u503c\u8d8a\u4f4e\u5219\u4f30\u503c\u8d8a\u4f4e\uff1b \u2461 PE/PB\u767e\u5206\u4f4d\u662f\u5f53\u524dPE/PB\u4f4e\u4e8e\u5386\u53f2\u6570\u636e\u7684\u6c34\u5e73\uff1b \u2462 DYR\u3001ROE\u3001PEG\u5206\u522b\u662f\u80a1\u606f\u7387\u3001\u51c0\u8d44\u4ea7\u6536\u76ca\u7387\u3001\u5e02\u76c8\u7387\u76f8\u5bf9\u76c8\u5229\u589e\u957f\u6bd4\u7387\u3002 * \u91d1\u878d\u3001\u5468\u671f\u3001\u91cd\u8d44\u4ea7\u7b49\u884c\u4e1a\u901a\u5e38\u4f7f\u7528PB\u767e\u5206\u4f4d\u4f30\u503c\uff0c\u5176\u4f59\u884c\u4e1a\u901a\u5e38\u4f7f\u7528PE\u767e\u5206\u4f4d\u4f30\u503c\u3002 * \u91cd\u8981\u63d0\u793a\uff1a\u6295\u8d44\u6709\u98ce\u9669\uff0c\u51b3\u7b56\u9700\u8c28\u614e\u3002\u7f51\u7ad9\u6570\u636e\u4ec5\u4f9b\u53c2\u8003\uff0c\u4e0d\u6784\u6210\u4efb\u4f55\u6295\u8d44\u5efa\u8bae\u3002","title":"\u6307\u6570\u4f30\u503c"},{"location":"docs/market-center/zsgz/#_1","text":"\u98ce\u9669\u63d0\u793a\u4e0e\u6570\u636e\u8bf4\u660e \u4f30\u503c\u8f83\u4f4e\uff0cPE\u6216PB\u767e\u5206\u4f4d<30%\uff0c\u4e14PE\u5c0f\u4e8e20\uff1b \u4f30\u503c\u9002\u4e2d\uff0cPE\u6216PB\u767e\u5206\u4f4d<30%\uff0c\u6216PE\u5c0f\u4e8e20\uff1b \u4f30\u503c\u8f83\u9ad8\uff0cPE\u6216PB\u767e\u5206\u4f4d>70%\uff0c\u4e14PE\u5927\u4e8e20\uff1b \u6307\u6570\u6570\u636e\u65f6\u95f4\u8fc7\u77ed\uff0c\u6545\u4e0d\u53c2\u4e0e\u4f30\u503c\uff1b \u5e38\u7528\u4f30\u503c\u6307\u6807\u8bf4\u660e\uff1a \u2460 PE/PB\u6307\u5e02\u76c8\u7387/\u5e02\u51c0\u7387\uff0c\u4e00\u822c\u6570\u503c\u8d8a\u4f4e\u5219\u4f30\u503c\u8d8a\u4f4e\uff1b \u2461 PE/PB\u767e\u5206\u4f4d\u662f\u5f53\u524dPE/PB\u4f4e\u4e8e\u5386\u53f2\u6570\u636e\u7684\u6c34\u5e73\uff1b \u2462 DYR\u3001ROE\u3001PEG\u5206\u522b\u662f\u80a1\u606f\u7387\u3001\u51c0\u8d44\u4ea7\u6536\u76ca\u7387\u3001\u5e02\u76c8\u7387\u76f8\u5bf9\u76c8\u5229\u589e\u957f\u6bd4\u7387\u3002 * \u91d1\u878d\u3001\u5468\u671f\u3001\u91cd\u8d44\u4ea7\u7b49\u884c\u4e1a\u901a\u5e38\u4f7f\u7528PB\u767e\u5206\u4f4d\u4f30\u503c\uff0c\u5176\u4f59\u884c\u4e1a\u901a\u5e38\u4f7f\u7528PE\u767e\u5206\u4f4d\u4f30\u503c\u3002 * \u91cd\u8981\u63d0\u793a\uff1a\u6295\u8d44\u6709\u98ce\u9669\uff0c\u51b3\u7b56\u9700\u8c28\u614e\u3002\u7f51\u7ad9\u6570\u636e\u4ec5\u4f9b\u53c2\u8003\uff0c\u4e0d\u6784\u6210\u4efb\u4f55\u6295\u8d44\u5efa\u8bae\u3002","title":"\u6307\u6570\u4f30\u503c"}]}